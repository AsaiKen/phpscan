//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package net.katagaitai.phpscan.ast;

import lombok.Getter;
import net.katagaitai.phpscan.ast.nodes.*;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * CUP v0.11b 20150326 generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class PhpAstParser extends java_cup.runtime.lr_parser {
    @Getter
    private Program program;

    public final Class getSymbolContainer() {
        return ParserConstants.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public PhpAstParser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public PhpAstParser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public PhpAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short[][] _production_table =
            unpackFromStrings(new String[]{
                    "\000\u0203\000\002\002\003\000\002\002\004\000\002\003" +
                            "\003\000\002\003\005\000\002\003\003\000\002\006\004" +
                            "\000\002\006\002\000\002\007\003\000\002\007\003\000" +
                            "\002\007\003\000\002\007\006\000\002\007\005\000\002" +
                            "\007\007\000\002\007\006\000\002\007\005\000\002\007" +
                            "\006\000\002\007\006\000\002\007\004\000\002\005\005" +
                            "\000\002\005\003\000\002\004\003\000\002\004\005\000" +
                            "\002\004\004\000\002\004\006\000\002\011\004\000\002" +
                            "\011\002\000\002\012\003\000\002\012\003\000\002\012" +
                            "\003\000\002\012\006\000\002\010\003\000\002\010\004" +
                            "\000\002\013\005\000\002\013\011\000\002\013\014\000" +
                            "\002\013\007\000\002\013\011\000\002\013\013\000\002" +
                            "\013\007\000\002\013\004\000\002\013\005\000\002\013" +
                            "\004\000\002\013\005\000\002\013\004\000\002\013\005" +
                            "\000\002\013\005\000\002\013\004\000\002\013\005\000" +
                            "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
                            "\013\004\000\002\013\005\000\002\013\007\000\002\013" +
                            "\011\000\002\013\012\000\002\013\007\000\002\013\003" +
                            "\000\002\013\010\000\002\013\005\000\002\013\005\000" +
                            "\002\013\003\000\002\013\004\000\002\013\005\000\002" +
                            "\131\003\000\002\131\002\000\002\132\003\000\002\132" +
                            "\004\000\002\133\012\000\002\177\003\000\002\177\002" +
                            "\000\002\200\006\000\002\014\003\000\002\014\005\000" +
                            "\002\015\003\000\002\016\003\000\002\016\005\000\002" +
                            "\126\003\000\002\127\003\000\002\051\002\000\002\051" +
                            "\003\000\002\134\013\000\002\135\011\000\002\135\010" +
                            "\000\002\136\003\000\002\136\004\000\002\136\004\000" +
                            "\002\136\003\000\002\137\002\000\002\137\004\000\002" +
                            "\113\003\000\002\114\002\000\002\114\004\000\002\140" +
                            "\002\000\002\140\004\000\002\141\003\000\002\141\005" +
                            "\000\002\201\006\000\002\202\003\000\002\202\003\000" +
                            "\002\017\004\000\002\203\003\000\002\203\003\000\002" +
                            "\020\003\000\002\020\004\000\002\021\003\000\002\021" +
                            "\005\000\002\022\003\000\002\022\005\000\002\023\003" +
                            "\000\002\023\005\000\002\024\005\000\002\024\007\000" +
                            "\002\025\005\000\002\025\006\000\002\025\005\000\002" +
                            "\025\006\000\002\026\002\000\002\026\007\000\002\026" +
                            "\006\000\002\027\003\000\002\027\003\000\002\030\003" +
                            "\000\002\030\005\000\002\031\002\000\002\031\010\000" +
                            "\002\032\002\000\002\032\011\000\002\033\002\000\002" +
                            "\033\004\000\002\034\002\000\002\034\005\000\002\035" +
                            "\003\000\002\035\002\000\002\040\003\000\002\040\005" +
                            "\000\002\041\004\000\002\041\005\000\002\041\005\000" +
                            "\002\041\006\000\002\041\006\000\002\041\007\000\002" +
                            "\142\002\000\002\142\003\000\002\142\003\000\002\142" +
                            "\003\000\002\042\003\000\002\042\002\000\002\043\003" +
                            "\000\002\043\003\000\002\043\004\000\002\043\004\000" +
                            "\002\043\004\000\002\043\005\000\002\043\005\000\002" +
                            "\043\006\000\002\043\006\000\002\043\006\000\002\044" +
                            "\005\000\002\044\003\000\002\045\003\000\002\045\004" +
                            "\000\002\045\006\000\002\046\005\000\002\046\007\000" +
                            "\002\046\003\000\002\046\005\000\002\047\004\000\002" +
                            "\047\002\000\002\050\005\000\002\050\004\000\002\050" +
                            "\012\000\002\050\004\000\002\050\003\000\002\161\005" +
                            "\000\002\162\003\000\002\162\005\000\002\163\003\000" +
                            "\002\163\005\000\002\164\002\000\002\164\003\000\002" +
                            "\165\003\000\002\165\004\000\002\166\004\000\002\166" +
                            "\004\000\002\167\005\000\002\170\003\000\002\170\005" +
                            "\000\002\171\003\000\002\171\003\000\002\172\005\000" +
                            "\002\173\006\000\002\173\005\000\002\174\002\000\002" +
                            "\174\003\000\002\123\003\000\002\123\005\000\002\144" +
                            "\003\000\002\144\003\000\002\122\002\000\002\122\003" +
                            "\000\002\124\003\000\002\124\004\000\002\125\003\000" +
                            "\002\125\003\000\002\125\003\000\002\125\003\000\002" +
                            "\125\003\000\002\125\003\000\002\120\005\000\002\120" +
                            "\007\000\002\120\003\000\002\120\005\000\002\121\007" +
                            "\000\002\121\006\000\002\052\005\000\002\052\003\000" +
                            "\002\053\002\000\002\053\003\000\002\054\005\000\002" +
                            "\054\003\000\002\175\005\000\002\175\005\000\002\175" +
                            "\005\000\002\175\011\000\002\175\011\000\002\176\005" +
                            "\000\002\055\010\000\002\055\005\000\002\055\006\000" +
                            "\002\055\010\000\002\055\004\000\002\055\005\000\002" +
                            "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
                            "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
                            "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
                            "\002\055\005\000\002\055\004\000\002\055\004\000\002" +
                            "\055\004\000\002\055\004\000\002\055\005\000\002\055" +
                            "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
                            "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
                            "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
                            "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
                            "\005\000\002\055\005\000\002\055\005\000\002\055\004" +
                            "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
                            "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
                            "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
                            "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
                            "\000\002\055\003\000\002\055\005\000\002\055\003\000" +
                            "\002\055\007\000\002\055\006\000\002\055\003\000\002" +
                            "\055\004\000\002\055\004\000\002\055\004\000\002\055" +
                            "\004\000\002\055\004\000\002\055\004\000\002\055\004" +
                            "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
                            "\002\055\003\000\002\055\005\000\002\055\004\000\002" +
                            "\055\013\000\002\055\014\000\002\206\006\000\002\206" +
                            "\005\000\002\207\006\000\002\207\006\000\002\036\002" +
                            "\000\002\036\006\000\002\037\005\000\002\037\006\000" +
                            "\002\037\003\000\002\037\004\000\002\056\006\000\002" +
                            "\056\010\000\002\056\007\000\002\056\010\000\002\056" +
                            "\010\000\002\056\010\000\002\056\010\000\002\056\006" +
                            "\000\002\056\006\000\002\116\003\000\002\116\003\000" +
                            "\002\116\005\000\002\116\004\000\002\117\003\000\002" +
                            "\117\005\000\002\117\004\000\002\152\003\000\002\152" +
                            "\003\000\002\154\003\000\002\156\003\000\002\156\005" +
                            "\000\002\156\005\000\002\057\002\000\002\057\004\000" +
                            "\002\057\005\000\002\106\002\000\002\106\003\000\002" +
                            "\106\003\000\002\060\002\000\002\060\005\000\002\212" +
                            "\006\000\002\212\006\000\002\061\003\000\002\061\003" +
                            "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
                            "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
                            "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
                            "\003\000\002\061\005\000\002\061\004\000\002\062\003" +
                            "\000\002\062\006\000\002\062\005\000\002\062\005\000" +
                            "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
                            "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
                            "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
                            "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
                            "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
                            "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
                            "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
                            "\000\002\062\004\000\002\062\004\000\002\062\004\000" +
                            "\002\062\004\000\002\062\007\000\002\062\006\000\002" +
                            "\062\005\000\002\210\006\000\002\210\005\000\002\211" +
                            "\006\000\002\211\006\000\002\213\006\000\002\213\006" +
                            "\000\002\214\006\000\002\214\006\000\002\214\006\000" +
                            "\002\063\003\000\002\063\003\000\002\063\005\000\002" +
                            "\063\004\000\002\063\003\000\002\063\003\000\002\063" +
                            "\003\000\002\063\003\000\002\157\005\000\002\157\005" +
                            "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
                            "\002\064\005\000\002\064\004\000\002\064\003\000\002" +
                            "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
                            "\003\000\002\064\003\000\002\065\002\000\002\065\004" +
                            "\000\002\066\002\000\002\066\003\000\002\067\007\000" +
                            "\002\067\005\000\002\067\005\000\002\067\003\000\002" +
                            "\070\003\000\002\070\003\000\002\143\003\000\002\115" +
                            "\003\000\002\145\003\000\002\130\003\000\002\130\005" +
                            "\000\002\130\005\000\002\130\011\000\002\130\011\000" +
                            "\002\146\003\000\002\146\004\000\002\146\003\000\002" +
                            "\147\005\000\002\147\005\000\002\072\003\000\002\160" +
                            "\003\000\002\160\003\000\002\160\003\000\002\155\003" +
                            "\000\002\155\004\000\002\155\003\000\002\071\006\000" +
                            "\002\071\006\000\002\071\003\000\002\073\003\000\002" +
                            "\073\006\000\002\074\002\000\002\074\003\000\002\076" +
                            "\002\000\002\076\006\000\002\075\006\000\002\075\006" +
                            "\000\002\075\003\000\002\077\003\000\002\077\005\000" +
                            "\002\100\003\000\002\100\004\000\002\101\005\000\002" +
                            "\101\003\000\002\102\003\000\002\102\003\000\002\102" +
                            "\002\000\002\103\002\000\002\103\004\000\002\104\007" +
                            "\000\002\104\005\000\002\104\005\000\002\104\003\000" +
                            "\002\104\010\000\002\104\006\000\002\104\006\000\002" +
                            "\104\004\000\002\105\004\000\002\105\004\000\002\105" +
                            "\004\000\002\105\003\000\002\105\004\000\002\107\003" +
                            "\000\002\107\006\000\002\107\005\000\002\107\005\000" +
                            "\002\107\010\000\002\107\005\000\002\110\003\000\002" +
                            "\110\003\000\002\110\003\000\002\111\006\000\002\111" +
                            "\006\000\002\111\004\000\002\111\004\000\002\111\006" +
                            "\000\002\111\004\000\002\111\004\000\002\150\003\000" +
                            "\002\150\005\000\002\153\005\000\002\153\005\000\002" +
                            "\153\005\000\002\151\003\000\002\112\003\000\002\112" +
                            "\003\000\002\204\003\000\002\204\003\000\002\205\003" +
                            "\000\002\205\004\000\002\205\006"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0411\000\002\001\ufffb\000\004\002\u0413\001\002\000" +
                            "\254\003\134\004\166\005\200\006\123\007\011\010\072" +
                            "\011\037\012\061\013\070\015\107\020\146\021\024\022" +
                            "\142\023\137\024\050\026\036\030\116\032\201\035\120" +
                            "\037\150\043\063\044\140\045\102\046\124\047\155\050" +
                            "\157\051\013\052\044\054\176\056\031\057\012\061\111" +
                            "\062\171\063\034\064\065\065\035\066\164\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\113\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\221\071\222" +
                            "\021\226\174\231\115\232\127\233\066\234\112\236\135" +
                            "\240\133\001\001\000\002\001\ufea6\000\004\226\u0410\001" +
                            "\002\000\002\001\uffc8\000\002\001\ufeaa\000\006\013\u0405" +
                            "\231\u0406\001\002\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\ufe01\000" +
                            "\002\001\ufeea\000\004\226\u03fc\001\002\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\002\001\ufedb\000\072\034\u014c\125" +
                            "\u0144\126\u0154\127\u013d\146\u0140\147\u03fa\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\001\002\000\004\065\u03f9\001\002\000\004\212\u03f6" +
                            "\001\ufe5f\000\002\001\ufea4\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\002\001\ufe40\000\236\003\134\004\166\005\200" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\015" +
                            "\107\020\146\021\024\022\142\023\137\024\050\026\036" +
                            "\030\116\032\201\035\120\037\150\043\063\044\140\045" +
                            "\102\046\247\050\157\051\013\052\044\054\176\056\273" +
                            "\057\012\061\111\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\106\074" +
                            "\111\246\112\147\113\045\114\076\115\026\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\147\010" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\046\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\002\001\uffb3" +
                            "\000\042\071\u0137\131\u012c\132\u0130\133\u012d\134\u0138\135" +
                            "\u0131\136\u0136\137\u0133\140\u0135\141\u012f\142\u012b\143\u0132" +
                            "\144\u0134\145\u012e\200\ufe51\201\ufe51\001\ufe53\000\020\011" +
                            "\227\020\306\046\u03e2\047\u03e5\114\u03e4\116\064\226\305" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\004\226\u03dc\001\002\000\002" +
                            "\001\uffad\000\004\226\u03cc\001\002\000\004\230\u03cb\001" +
                            "\uffff\000\014\013\070\017\u03c9\103\u021f\104\u0310\105\u030f" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\002\001" +
                            "\ufe45\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\004\106\u03b1" +
                            "\001\002\000\002\001\ufea5\000\006\013\u03a8\046\u01f5\001" +
                            "\ufec2\000\004\212\u03a5\001\ufe44\000\004\226\u039d\001\002" +
                            "\000\002\001\ufea2\000\006\212\u017c\226\ufe49\001\ufe43\000" +
                            "\004\011\u0393\001\002\000\002\001\ufea1\000\002\001\ufe50" +
                            "\000\004\226\u0390\001\002\000\160\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u037d\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\ufe2a\000\024\011\227\013\070\074\015\111\u01c7" +
                            "\114\u01c3\116\064\212\057\220\226\231\115\001\002\000" +
                            "\002\001\ufe68\000\012\106\u0176\110\ufe46\212\u0177\226\ufe4b" +
                            "\001\ufe42\000\160\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\147\u0379\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\002\001\ufffd\000\004\226\u0376\001\002\000\012\013\070" +
                            "\017\u0374\104\u0310\105\u030f\001\ufeb2\000\006\110\u036d\212" +
                            "\u036c\001\002\000\002\001\ufe06\000\004\065\u036b\001\002" +
                            "\000\002\001\ufea9\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\002\001\uffe8\000\002\001\ufee5\000\006\011\227\116\064" +
                            "\001\002\000\004\212\u017f\001\ufeda\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\004" +
                            "\011\u0363\001\002\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\006\013\070\231\u0183\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\002\001\ufe67\000\002\001\uffcf\000\020\011" +
                            "\227\013\070\111\u0166\114\u015f\116\064\220\226\231\115" +
                            "\001\002\000\004\226\u0356\001\002\000\012\013\070\017" +
                            "\u0311\104\u0310\105\u030f\001\002\000\012\011\227\106\u034c" +
                            "\114\u011f\116\064\001\002\000\006\200\u034a\201\u034b\001" +
                            "\002\000\004\106\u0184\001\ufe31\000\004\226\u0333\001\002" +
                            "\000\002\001\ufff9\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\002\001\ufeab\000\004\154\250\001\uffb2\000" +
                            "\002\001\ufe63\000\002\001\uffe3\000\012\013\070\017\u0311" +
                            "\104\u0310\105\u030f\001\002\000\002\001\ufe3c\000\004\011" +
                            "\u02bc\001\002\000\006\124\u02b7\147\u02b8\001\002\000\002" +
                            "\001\ufea3\000\002\001\uffc4\000\002\001\uffaa\000\002\001" +
                            "\ufe3d\000\236\003\134\004\166\005\200\006\123\007\011" +
                            "\010\072\011\037\012\061\013\070\015\107\020\146\021" +
                            "\024\022\142\023\137\024\050\026\036\030\116\032\201" +
                            "\035\120\037\150\043\063\044\140\045\102\046\247\050" +
                            "\157\051\013\052\044\054\176\056\273\057\012\061\111" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\106\074\111\246\112\147" +
                            "\113\045\114\076\115\026\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\147\010\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\046\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\160\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\147\u02ae\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\004\212\u02ab\001\ufe5e\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\002\001\ufff8\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\004\212" +
                            "\u02a1\001\ufea8\000\002\001\ufea0\000\004\226\u0288\001\002" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\002\001\uffb4\000" +
                            "\002\001\ufea7\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\004" +
                            "\011\u0283\001\002\000\004\147\u0282\001\002\000\160\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\147\u027d\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\004\212\u027a\001\002" +
                            "\000\002\001\ufe54\000\004\110\u0278\001\002\000\002\001" +
                            "\ufe55\000\002\001\uffa7\000\012\110\ufec1\114\236\212\ufec1" +
                            "\226\u01c9\001\ufe66\000\004\226\u0273\001\ufeb5\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\002\001\ufffa\000\004\226\u026c" +
                            "\001\002\000\004\071\u0261\001\ufee8\000\004\226\u0253\001" +
                            "\002\000\160\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\051\013\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\024" +
                            "\011\227\013\070\074\015\111\u01c7\114\u01c3\116\064\212" +
                            "\057\220\226\231\115\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\002\001\ufffc\000\004\226\u022d\001\002\000" +
                            "\004\226\202\001\002\000\006\011\206\116\204\001\002" +
                            "\000\006\124\u0224\227\u0223\001\002\000\002\001\ufe04\000" +
                            "\004\131\207\001\002\000\002\001\ufe05\000\064\006\123" +
                            "\007\011\010\072\011\227\020\230\074\220\075\023\076" +
                            "\051\077\054\100\153\101\006\102\211\111\234\112\147" +
                            "\113\045\114\217\116\064\167\231\170\215\175\212\176" +
                            "\210\212\222\220\226\226\232\240\133\001\002\000\064" +
                            "\006\123\007\011\010\072\011\227\020\230\074\220\075" +
                            "\023\076\051\077\054\100\153\101\006\102\211\111\234" +
                            "\112\147\113\045\114\217\116\064\167\231\170\215\175" +
                            "\212\176\210\212\222\220\226\226\232\240\133\001\002" +
                            "\000\006\017\u0220\103\u021f\001\002\000\064\006\123\007" +
                            "\011\010\072\011\227\020\230\074\220\075\023\076\051" +
                            "\077\054\100\153\101\006\102\211\111\234\112\147\113" +
                            "\045\114\217\116\064\167\231\170\215\175\212\176\210" +
                            "\212\222\220\226\226\232\240\133\001\002\000\070\125" +
                            "\350\126\367\127\341\146\344\150\340\151\361\152\342" +
                            "\153\352\154\362\155\366\156\354\157\336\160\351\161" +
                            "\365\162\364\163\346\164\363\165\360\166\353\167\370" +
                            "\170\347\171\357\172\345\173\355\174\337\177\343\212" +
                            "\356\001\uff92\000\002\001\ufe72\000\064\006\123\007\011" +
                            "\010\072\011\227\020\230\074\220\075\023\076\051\077" +
                            "\054\100\153\101\006\102\211\111\234\112\147\113\045" +
                            "\114\217\116\064\167\231\170\215\175\212\176\210\212" +
                            "\222\220\226\226\232\240\133\001\002\000\002\001\ufe6b" +
                            "\000\006\011\227\116\064\001\002\000\004\226\u0219\001" +
                            "\002\000\004\212\u0216\001\ufe6d\000\064\006\123\007\011" +
                            "\010\072\011\227\020\230\074\220\075\023\076\051\077" +
                            "\054\100\153\101\006\102\211\111\234\112\147\113\045" +
                            "\114\217\116\064\167\231\170\215\175\212\176\210\212" +
                            "\222\220\226\226\232\240\133\001\ufe5d\000\004\212\u0208" +
                            "\001\ufe6c\000\004\110\u0205\001\002\000\002\001\ufe9d\000" +
                            "\002\001\ufec2\000\002\001\uffff\000\004\212\u0202\001\ufea8" +
                            "\000\064\006\123\007\011\010\072\011\227\020\230\074" +
                            "\220\075\023\076\051\077\054\100\153\101\006\102\211" +
                            "\111\234\112\147\113\045\114\217\116\064\167\231\170" +
                            "\215\175\212\176\210\212\222\220\226\226\232\240\133" +
                            "\001\002\000\064\006\123\007\011\010\072\011\227\020" +
                            "\230\074\220\075\023\076\051\077\054\100\153\101\006" +
                            "\102\211\111\234\112\147\113\045\114\217\116\064\167" +
                            "\231\170\215\175\212\176\210\212\222\220\226\226\232" +
                            "\240\133\001\002\000\004\212\242\001\ufe6e\000\004\114" +
                            "\240\001\002\000\006\110\ufec1\114\236\001\ufe71\000\004" +
                            "\011\237\001\002\000\002\001\ufffe\000\006\011\227\116" +
                            "\064\001\002\000\006\110\ufec0\114\236\001\ufe70\000\156" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\245\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\ufe3a\000\070\034\u014c\125\u0144\126" +
                            "\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146" +
                            "\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162" +
                            "\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143" +
                            "\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufe39\000" +
                            "\004\213\u01fe\001\002\000\004\046\u01f5\001\ufec2\000\004" +
                            "\114\u011f\001\002\000\004\154\250\001\uffb2\000\002\001" +
                            "\uffb1\000\004\226\252\001\002\000\020\011\227\074\253" +
                            "\111\260\114\263\116\064\227\uff7c\237\257\001\uff73\000" +
                            "\002\001\uff71\000\004\114\236\001\ufebe\000\010\013\333" +
                            "\154\331\241\332\001\002\000\004\124\327\001\uff7d\000" +
                            "\002\001\uff70\000\004\114\325\001\002\000\002\001\uff72" +
                            "\000\002\001\uff7b\000\006\011\227\116\064\001\002\000" +
                            "\004\227\265\001\002\000\004\056\266\001\ufed1\000\004" +
                            "\226\312\001\002\000\004\106\270\001\002\000\002\001" +
                            "\uffe8\000\254\003\134\004\166\005\200\006\123\007\011" +
                            "\010\072\011\037\012\061\013\070\015\107\020\146\021" +
                            "\024\022\142\023\137\024\050\026\036\030\116\032\201" +
                            "\035\120\037\150\043\063\044\140\045\102\046\124\050" +
                            "\157\051\013\052\044\054\176\056\273\057\012\061\111" +
                            "\062\171\063\034\064\274\065\035\066\164\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\107\276\111\246\112\147\113\045\114\076\115" +
                            "\026\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\147\010\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\046\221" +
                            "\071\222\021\226\174\231\115\232\127\233\066\234\112" +
                            "\236\135\240\133\001\002\000\002\001\uffe9\000\006\020" +
                            "\306\226\305\001\002\000\004\226\301\001\002\000\002" +
                            "\001\uffe6\000\002\001\ufed7\000\002\001\uffe5\000\002\001" +
                            "\uffe7\000\004\227\302\001\002\000\004\147\303\001\002" +
                            "\000\002\001\uffe4\000\004\147\311\001\002\000\004\020" +
                            "\307\001\002\000\002\001\uffb6\000\004\227\310\001\002" +
                            "\000\002\001\uffb5\000\002\001\uffcd\000\006\013\315\154" +
                            "\313\001\002\000\004\013\323\001\002\000\006\124\317" +
                            "\227\316\001\002\000\002\001\ufecd\000\002\001\ufed0\000" +
                            "\006\013\321\154\320\001\002\000\004\013\322\001\002" +
                            "\000\002\001\ufecf\000\002\001\ufece\000\002\001\ufecc\000" +
                            "\004\114\236\001\ufebc\000\006\011\227\116\064\001\002" +
                            "\000\004\114\236\001\ufebd\000\016\011\227\074\253\111" +
                            "\260\114\263\116\064\237\257\001\uff73\000\002\001\uff7a" +
                            "\000\006\013\u011b\241\u011a\001\002\000\004\013\u0119\001" +
                            "\002\000\004\131\334\001\uff79\000\064\006\123\007\011" +
                            "\010\072\011\227\020\230\074\220\075\023\076\051\077" +
                            "\054\100\153\101\006\102\211\111\234\112\147\113\045" +
                            "\114\217\116\064\167\231\170\215\175\212\176\210\212" +
                            "\222\220\226\226\232\240\133\001\002\000\070\125\350" +
                            "\126\367\127\341\146\344\150\340\151\361\152\342\153" +
                            "\352\154\362\155\366\156\354\157\336\160\351\161\365" +
                            "\162\364\163\346\164\363\165\360\166\353\167\370\170" +
                            "\347\171\357\172\345\173\355\174\337\177\343\212\356" +
                            "\001\uff75\000\064\006\123\007\011\010\072\011\227\020" +
                            "\230\074\220\075\023\076\051\077\054\100\153\101\006" +
                            "\102\211\111\234\112\147\113\045\114\217\116\064\167" +
                            "\231\170\215\175\212\176\210\212\222\220\226\226\232" +
                            "\240\133\001\002\000\064\006\123\007\011\010\072\011" +
                            "\227\020\230\074\220\075\023\076\051\077\054\100\153" +
                            "\101\006\102\211\111\234\112\147\113\045\114\217\116" +
                            "\064\167\231\170\215\175\212\176\210\212\222\220\226" +
                            "\226\232\240\133\001\002\000\064\006\123\007\011\010" +
                            "\072\011\227\020\230\074\220\075\023\076\051\077\054" +
                            "\100\153\101\006\102\211\111\234\112\147\113\045\114" +
                            "\217\116\064\167\231\170\215\175\212\176\210\212\222" +
                            "\220\226\226\232\240\133\001\002\000\064\006\123\007" +
                            "\011\010\072\011\227\020\230\074\220\075\023\076\051" +
                            "\077\054\100\153\101\006\102\211\111\234\112\147\113" +
                            "\045\114\217\116\064\167\231\170\215\175\212\176\210" +
                            "\212\222\220\226\226\232\240\133\001\002\000\064\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\167\231\170\215\175\212" +
                            "\176\210\212\222\220\226\226\232\240\133\001\002\000" +
                            "\064\006\123\007\011\010\072\011\227\020\230\074\220" +
                            "\075\023\076\051\077\054\100\153\101\006\102\211\111" +
                            "\234\112\147\113\045\114\217\116\064\167\231\170\215" +
                            "\175\212\176\210\212\222\220\226\226\232\240\133\001" +
                            "\002\000\066\006\123\007\011\010\072\011\227\020\230" +
                            "\074\220\075\023\076\051\077\054\100\153\101\006\102" +
                            "\211\111\234\112\147\113\045\114\217\116\064\167\231" +
                            "\170\215\175\212\176\210\212\222\220\226\226\232\230" +
                            "\u010f\240\133\001\002\000\064\006\123\007\011\010\072" +
                            "\011\227\020\230\074\220\075\023\076\051\077\054\100" +
                            "\153\101\006\102\211\111\234\112\147\113\045\114\217" +
                            "\116\064\167\231\170\215\175\212\176\210\212\222\220" +
                            "\226\226\232\240\133\001\002\000\064\006\123\007\011" +
                            "\010\072\011\227\020\230\074\220\075\023\076\051\077" +
                            "\054\100\153\101\006\102\211\111\234\112\147\113\045" +
                            "\114\217\116\064\167\231\170\215\175\212\176\210\212" +
                            "\222\220\226\226\232\240\133\001\002\000\064\006\123" +
                            "\007\011\010\072\011\227\020\230\074\220\075\023\076" +
                            "\051\077\054\100\153\101\006\102\211\111\234\112\147" +
                            "\113\045\114\217\116\064\167\231\170\215\175\212\176" +
                            "\210\212\222\220\226\226\232\240\133\001\002\000\064" +
                            "\006\123\007\011\010\072\011\227\020\230\074\220\075" +
                            "\023\076\051\077\054\100\153\101\006\102\211\111\234" +
                            "\112\147\113\045\114\217\116\064\167\231\170\215\175" +
                            "\212\176\210\212\222\220\226\226\232\240\133\001\002" +
                            "\000\064\006\123\007\011\010\072\011\227\020\230\074" +
                            "\220\075\023\076\051\077\054\100\153\101\006\102\211" +
                            "\111\234\112\147\113\045\114\217\116\064\167\231\170" +
                            "\215\175\212\176\210\212\222\220\226\226\232\240\133" +
                            "\001\002\000\064\006\123\007\011\010\072\011\227\020" +
                            "\230\074\220\075\023\076\051\077\054\100\153\101\006" +
                            "\102\211\111\234\112\147\113\045\114\217\116\064\167" +
                            "\231\170\215\175\212\176\210\212\222\220\226\226\232" +
                            "\240\133\001\002\000\064\006\123\007\011\010\072\011" +
                            "\227\020\230\074\220\075\023\076\051\077\054\100\153" +
                            "\101\006\102\211\111\234\112\147\113\045\114\217\116" +
                            "\064\167\231\170\215\175\212\176\210\212\222\220\226" +
                            "\226\232\240\133\001\002\000\064\006\123\007\011\010" +
                            "\072\011\227\020\230\074\220\075\023\076\051\077\054" +
                            "\100\153\101\006\102\211\111\234\112\147\113\045\114" +
                            "\217\116\064\167\231\170\215\175\212\176\210\212\222" +
                            "\220\226\226\232\240\133\001\002\000\064\006\123\007" +
                            "\011\010\072\011\227\020\230\074\220\075\023\076\051" +
                            "\077\054\100\153\101\006\102\211\111\234\112\147\113" +
                            "\045\114\217\116\064\167\231\170\215\175\212\176\210" +
                            "\212\222\220\226\226\232\240\133\001\002\000\052\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\212\222\220\226\240\133" +
                            "\001\002\000\064\006\123\007\011\010\072\011\227\020" +
                            "\230\074\220\075\023\076\051\077\054\100\153\101\006" +
                            "\102\211\111\234\112\147\113\045\114\217\116\064\167" +
                            "\231\170\215\175\212\176\210\212\222\220\226\226\232" +
                            "\240\133\001\002\000\064\006\123\007\011\010\072\011" +
                            "\227\020\230\074\220\075\023\076\051\077\054\100\153" +
                            "\101\006\102\211\111\234\112\147\113\045\114\217\116" +
                            "\064\167\231\170\215\175\212\176\210\212\222\220\226" +
                            "\226\232\240\133\001\002\000\064\006\123\007\011\010" +
                            "\072\011\227\020\230\074\220\075\023\076\051\077\054" +
                            "\100\153\101\006\102\211\111\234\112\147\113\045\114" +
                            "\217\116\064\167\231\170\215\175\212\176\210\212\222" +
                            "\220\226\226\232\240\133\001\002\000\064\006\123\007" +
                            "\011\010\072\011\227\020\230\074\220\075\023\076\051" +
                            "\077\054\100\153\101\006\102\211\111\234\112\147\113" +
                            "\045\114\217\116\064\167\231\170\215\175\212\176\210" +
                            "\212\222\220\226\226\232\240\133\001\002\000\064\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\167\231\170\215\175\212" +
                            "\176\210\212\222\220\226\226\232\240\133\001\002\000" +
                            "\064\006\123\007\011\010\072\011\227\020\230\074\220" +
                            "\075\023\076\051\077\054\100\153\101\006\102\211\111" +
                            "\234\112\147\113\045\114\217\116\064\167\231\170\215" +
                            "\175\212\176\210\212\222\220\226\226\232\240\133\001" +
                            "\002\000\064\006\123\007\011\010\072\011\227\020\230" +
                            "\074\220\075\023\076\051\077\054\100\153\101\006\102" +
                            "\211\111\234\112\147\113\045\114\217\116\064\167\231" +
                            "\170\215\175\212\176\210\212\222\220\226\226\232\240" +
                            "\133\001\002\000\064\006\123\007\011\010\072\011\227" +
                            "\020\230\074\220\075\023\076\051\077\054\100\153\101" +
                            "\006\102\211\111\234\112\147\113\045\114\217\116\064" +
                            "\167\231\170\215\175\212\176\210\212\222\220\226\226" +
                            "\232\240\133\001\002\000\064\006\123\007\011\010\072" +
                            "\011\227\020\230\074\220\075\023\076\051\077\054\100" +
                            "\153\101\006\102\211\111\234\112\147\113\045\114\217" +
                            "\116\064\167\231\170\215\175\212\176\210\212\222\220" +
                            "\226\226\232\240\133\001\002\000\064\006\123\007\011" +
                            "\010\072\011\227\020\230\074\220\075\023\076\051\077" +
                            "\054\100\153\101\006\102\211\111\234\112\147\113\045" +
                            "\114\217\116\064\167\231\170\215\175\212\176\210\212" +
                            "\222\220\226\226\232\240\133\001\002\000\014\171\357" +
                            "\172\345\173\355\174\337\212\356\001\ufe8a\000\064\127" +
                            "\341\146\344\150\340\151\361\152\342\153\352\154\362" +
                            "\155\366\156\354\157\336\160\351\161\365\162\364\163" +
                            "\346\164\363\165\360\166\353\167\370\170\347\171\357" +
                            "\172\345\173\355\174\337\177\343\212\356\001\ufe8f\000" +
                            "\036\161\365\162\364\163\346\164\363\165\360\166\353" +
                            "\167\370\170\347\171\357\172\345\173\355\174\337\177" +
                            "\343\212\356\001\ufe99\000\026\165\360\166\353\167\370" +
                            "\170\347\171\357\172\345\173\355\174\337\177\343\212" +
                            "\356\001\ufe96\000\026\165\360\166\353\167\370\170\347" +
                            "\171\357\172\345\173\355\174\337\177\343\212\356\001" +
                            "\ufe94\000\026\165\360\166\353\167\370\170\347\171\357" +
                            "\172\345\173\355\174\337\177\343\212\356\001\ufe95\000" +
                            "\046\155\366\156\354\157\336\160\351\161\365\162\364" +
                            "\163\346\164\363\165\360\166\353\167\370\170\347\171" +
                            "\357\172\345\173\355\174\337\177\343\212\356\001\ufe8d" +
                            "\000\054\152\342\153\352\154\362\155\366\156\354\157" +
                            "\336\160\351\161\365\162\364\163\346\164\363\165\360" +
                            "\166\353\167\370\170\347\171\357\172\345\173\355\174" +
                            "\337\177\343\212\356\001\ufe92\000\022\167\370\170\347" +
                            "\171\357\172\345\173\355\174\337\177\343\212\356\001" +
                            "\ufe85\000\004\212\356\001\ufe88\000\004\213\u0104\001\002" +
                            "\000\002\001\ufe9c\000\004\212\356\001\ufe87\000\036\161" +
                            "\365\162\364\163\346\164\363\165\360\166\353\167\370" +
                            "\170\347\171\357\172\345\173\355\174\337\177\343\212" +
                            "\356\001\ufe98\000\022\167\370\170\347\171\357\172\345" +
                            "\173\355\174\337\177\343\212\356\001\ufe84\000\050\154" +
                            "\362\155\366\156\354\157\336\160\351\161\365\162\364" +
                            "\163\346\164\363\165\360\166\353\167\370\170\347\171" +
                            "\357\172\345\173\355\174\337\177\343\212\356\001\ufe8c" +
                            "\000\036\161\365\162\364\163\346\164\363\165\360\166" +
                            "\353\167\370\170\347\171\357\172\345\173\355\174\337" +
                            "\177\343\212\356\001\ufe9a\000\066\126\367\127\341\146" +
                            "\344\150\340\151\361\152\342\153\352\154\362\155\366" +
                            "\156\354\157\336\160\351\161\365\162\364\163\346\164" +
                            "\363\165\360\166\353\167\370\170\347\171\357\172\345" +
                            "\173\355\174\337\177\343\212\356\001\ufe91\000\014\171" +
                            "\357\172\345\173\355\174\337\212\356\001\ufe89\000\026" +
                            "\165\360\166\353\167\370\170\347\171\357\172\345\173" +
                            "\355\174\337\177\343\212\356\001\ufe97\000\004\212\356" +
                            "\001\ufe83\000\072\125\350\126\367\127\341\146\344\150" +
                            "\340\151\361\152\342\153\352\154\362\155\366\156\354" +
                            "\157\336\160\351\161\365\162\364\163\346\164\363\165" +
                            "\360\166\353\167\370\170\347\171\357\172\345\173\355" +
                            "\174\337\177\343\212\356\230\u0111\001\002\000\064\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\167\231\170\215\175\212" +
                            "\176\210\212\222\220\226\226\232\240\133\001\002\000" +
                            "\070\125\350\126\367\127\341\146\344\150\340\151\361" +
                            "\152\342\153\352\154\362\155\366\156\354\157\336\160" +
                            "\351\161\365\162\364\163\346\164\363\165\360\166\353" +
                            "\167\370\170\347\171\357\172\345\173\355\174\337\177" +
                            "\343\212\356\001\ufe7d\000\064\006\123\007\011\010\072" +
                            "\011\227\020\230\074\220\075\023\076\051\077\054\100" +
                            "\153\101\006\102\211\111\234\112\147\113\045\114\217" +
                            "\116\064\167\231\170\215\175\212\176\210\212\222\220" +
                            "\226\226\232\240\133\001\002\000\070\125\350\126\367" +
                            "\127\341\146\344\150\340\151\361\152\342\153\352\154" +
                            "\362\155\366\156\354\157\336\160\351\161\365\162\364" +
                            "\163\346\164\363\165\360\166\353\167\370\170\347\171" +
                            "\357\172\345\173\355\174\337\177\343\212\356\001\ufe7e" +
                            "\000\014\171\357\172\345\173\355\174\337\212\356\001" +
                            "\ufe8b\000\052\153\352\154\362\155\366\156\354\157\336" +
                            "\160\351\161\365\162\364\163\346\164\363\165\360\166" +
                            "\353\167\370\170\347\171\357\172\345\173\355\174\337" +
                            "\177\343\212\356\001\ufe8e\000\062\146\344\150\340\151" +
                            "\361\152\342\153\352\154\362\155\366\156\354\157\336" +
                            "\160\351\161\365\162\364\163\346\164\363\165\360\166" +
                            "\353\167\370\170\347\171\357\172\345\173\355\174\337" +
                            "\177\343\212\356\001\ufe90\000\056\151\361\152\342\153" +
                            "\352\154\362\155\366\156\354\157\336\160\351\161\365" +
                            "\162\364\163\346\164\363\165\360\166\353\167\370\170" +
                            "\347\171\357\172\345\173\355\174\337\177\343\212\356" +
                            "\001\ufe93\000\004\212\356\001\ufe86\000\036\161\365\162" +
                            "\364\163\346\164\363\165\360\166\353\167\370\170\347" +
                            "\171\357\172\345\173\355\174\337\177\343\212\356\001" +
                            "\ufe9b\000\002\001\uff78\000\004\013\u011e\001\002\000\004" +
                            "\131\u011c\001\uff77\000\064\006\123\007\011\010\072\011" +
                            "\227\020\230\074\220\075\023\076\051\077\054\100\153" +
                            "\101\006\102\211\111\234\112\147\113\045\114\217\116" +
                            "\064\167\231\170\215\175\212\176\210\212\222\220\226" +
                            "\226\232\240\133\001\002\000\070\125\350\126\367\127" +
                            "\341\146\344\150\340\151\361\152\342\153\352\154\362" +
                            "\155\366\156\354\157\336\160\351\161\365\162\364\163" +
                            "\346\164\363\165\360\166\353\167\370\170\347\171\357" +
                            "\172\345\173\355\174\337\177\343\212\356\001\uff74\000" +
                            "\002\001\uff76\000\006\011\227\116\064\001\002\000\012" +
                            "\110\ufec0\114\236\212\ufec0\226\u0121\001\ufe65\000\162\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\154\u0123\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\241\u0128\001\uff6e\000\004\227\u01f4" +
                            "\001\002\000\024\011\227\013\070\074\015\111\u01c7\114" +
                            "\u01c3\116\064\212\057\220\226\231\115\001\002\000\070" +
                            "\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\001\002\000\046\071\u0137\124\uff6c\131\u012c\132" +
                            "\u0130\133\u012d\134\u0138\135\u0131\136\u0136\137\u0133\140\u0135" +
                            "\141\u012f\142\u012b\143\u0132\144\u0134\145\u012e\200\ufe51\201" +
                            "\ufe51\227\uff6c\001\ufe53\000\004\124\u01ea\001\uff6f\000\006" +
                            "\124\uff6d\227\uff6d\001\ufe54\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\046\071\u0137\124\uff6b\131\u012c\132\u0130\133\u012d" +
                            "\134\u0138\135\u0131\136\u0136\137\u0133\140\u0135\141\u012f\142" +
                            "\u012b\143\u0132\144\u0134\145\u012e\200\ufe51\201\ufe51\227\uff6b" +
                            "\001\ufe53\000\006\124\uff6a\227\uff6a\001\ufe54\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\160\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\154\u01c0\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\156" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\245\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\002\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\020\011\206\013\070\074\015\106" +
                            "\u0173\116\204\212\057\231\115\001\002\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\062\034\u014c\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\001\uff17\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\160\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\230\u019f\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\156" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\245\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\002\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\020\011\227\013\070" +
                            "\111\u0166\114\u015f\116\064\220\226\231\115\001\002\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\064" +
                            "\034\u014c\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff05" +
                            "\000\014\034\u014c\171\u014a\172\u0141\173\u0149\174\u013b\001" +
                            "\uff00\000\036\034\u014c\161\u0151\162\u0150\163\u0142\164\u014f" +
                            "\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173" +
                            "\u0149\174\u013b\177\u013f\001\ufef2\000\026\034\u014c\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\ufeef\000\026\034\u014c\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\001\ufeed\000\026\034\u014c\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001" +
                            "\ufeee\000\054\034\u014c\152\u013e\153\u0146\154\u014d\155\u0152" +
                            "\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164" +
                            "\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141" +
                            "\173\u0149\174\u013b\177\u013f\001\uff08\000\046\034\u014c\155" +
                            "\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142" +
                            "\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172" +
                            "\u0141\173\u0149\174\u013b\177\u013f\001\uff03\000\002\001\ufeba" +
                            "\000\004\110\u0191\001\002\000\006\011\227\116\064\001" +
                            "\002\000\010\106\u0176\110\ufe46\212\u0177\001\ufe42\000\004" +
                            "\110\u018e\001\ufebb\000\002\001\ufeec\000\002\001\ufeb8\000" +
                            "\006\013\070\231\u0183\001\002\000\004\071\u016a\001\ufeb9" +
                            "\000\004\114\u0168\001\002\000\004\114\236\001\ufec1\000" +
                            "\006\011\227\116\064\001\002\000\004\114\236\001\ufec0" +
                            "\000\020\011\206\013\070\074\015\106\u0173\116\204\212" +
                            "\057\231\115\001\002\000\002\001\ufe33\000\002\001\ufe34" +
                            "\000\002\001\ufeb7\000\006\106\u0187\212\u0188\001\ufeb6\000" +
                            "\006\013\070\231\u0183\001\002\000\004\212\u017f\001\002" +
                            "\000\004\212\u017c\001\ufe49\000\006\106\u0176\212\u0177\001" +
                            "\ufe4b\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\072\034\u014c" +
                            "\107\u0175\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\001\002\000\002\001\ufe32\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\ufe3a\000\004" +
                            "\213\u0179\001\002\000\002\001\ufe3f\000\072\034\u014c\107" +
                            "\u017b\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\001\002\000\002\001\ufe3e\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\ufe3a\000\004\213\u017e\001\002\000\002\001\ufed2\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\ufe3a\000\004\213\u0181\001\002" +
                            "\000\002\001\ufed3\000\006\106\u0176\212\u0177\001\ufe4a\000" +
                            "\004\106\u0184\001\ufe30\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\072\034\u014c\107\u0186\125\u0144\126\u0154\127\u013d\146" +
                            "\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152" +
                            "\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164" +
                            "\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141" +
                            "\173\u0149\174\u013b\177\u013f\001\002\000\002\001\ufe3b\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\ufe3a\000\004\213\u018a\001\002\000\002\001\ufe36\000" +
                            "\072\034\u014c\107\u018c\125\u0144\126\u0154\127\u013d\146\u0140" +
                            "\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156" +
                            "\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f" +
                            "\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173" +
                            "\u0149\174\u013b\177\u013f\001\002\000\002\001\ufe35\000\006" +
                            "\106\u0176\212\u0177\001\ufe41\000\012\013\070\074\015\212" +
                            "\057\231\115\001\002\000\002\001\ufe48\000\004\114\236" +
                            "\001\ufebf\000\012\013\070\074\015\212\057\231\115\001" +
                            "\002\000\002\001\ufe47\000\022\034\u014c\167\u0153\170\u0143" +
                            "\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufefa\000" +
                            "\004\034\u014c\001\ufefe\000\004\034\u014c\001\ufefc\000\022" +
                            "\034\u014c\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\ufef9\000\036\034\u014c\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufef1\000\050" +
                            "\034\u014c\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161" +
                            "\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001" +
                            "\uff02\000\036\034\u014c\161\u0151\162\u0150\163\u0142\164\u014f" +
                            "\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173" +
                            "\u0149\174\u013b\177\u013f\001\ufef3\000\066\034\u014c\126\u0154" +
                            "\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154" +
                            "\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff07\000\014" +
                            "\034\u014c\171\u014a\172\u0141\173\u0149\174\u013b\001\ufeff\000" +
                            "\026\034\u014c\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a" +
                            "\172\u0141\173\u0149\174\u013b\177\u013f\001\ufef0\000\004\034" +
                            "\u014c\001\ufefd\000\072\034\u014c\125\u0144\126\u0154\127\u013d" +
                            "\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155" +
                            "\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142" +
                            "\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172" +
                            "\u0141\173\u0149\174\u013b\177\u013f\230\u01a1\001\002\000\156" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\245\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\002\000\070\034\u014c\125\u0144\126" +
                            "\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146" +
                            "\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162" +
                            "\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143" +
                            "\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufee6\000" +
                            "\156\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\070\034\u014c\125\u0144" +
                            "\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufee7" +
                            "\000\014\034\u014c\171\u014a\172\u0141\173\u0149\174\u013b\001" +
                            "\uff01\000\052\034\u014c\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff04\000\062\034\u014c\146\u0140\150" +
                            "\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff06\000\056\034\u014c\151\u014e\152" +
                            "\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145" +
                            "\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167" +
                            "\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f" +
                            "\001\uff09\000\004\034\u014c\001\ufefb\000\036\034\u014c\161" +
                            "\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001" +
                            "\ufef4\000\004\226\u01b2\001\ufe4f\000\010\106\u0187\212\u0188" +
                            "\226\u01ab\001\ufe4e\000\162\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\154\u0123\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\241" +
                            "\u0128\001\uff6e\000\004\227\u01ad\001\002\000\002\001\ufe38" +
                            "\000\004\212\u01af\001\ufe4c\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\ufe3a\000\004\213\u01b1\001\002\000\002\001\ufe37\000\162" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\154\u0123\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\241\u0128\001\uff6e\000\004\227" +
                            "\u01b4\001\002\000\002\001\ufe38\000\004\212\u01af\001\ufe4d" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff14" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff12" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff0e" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff13" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff0f" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff15" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff19" +
                            "\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff11" +
                            "\000\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150" +
                            "\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff16\000\062\034\u014c\146\u0140\150" +
                            "\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff18\000\026\011\227\013\070\074" +
                            "\015\111\u01c7\114\u01c3\116\064\212\057\214\u01c6\220\226" +
                            "\231\115\001\002\000\062\034\u014c\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\001\uff1d\000\004\110\u01e0\001\002\000\006\011" +
                            "\227\116\064\001\002\000\004\110\u01d3\001\002\000\004" +
                            "\071\u0137\001\uff1c\000\020\011\227\013\070\111\u0166\114" +
                            "\u015f\116\064\220\226\231\115\001\002\000\004\114\u01cc" +
                            "\001\002\000\006\114\236\226\u01c9\001\ufec1\000\162\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\154\u0123\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\245\226\174\231\115\232\127\233" +
                            "\066\234\112\240\133\241\u0128\001\uff6e\000\004\227\u01cb" +
                            "\001\002\000\002\001\ufecb\000\006\011\227\116\064\001" +
                            "\002\000\006\114\236\226\u0121\001\ufec0\000\004\226\u01d0" +
                            "\001\ufeaf\000\002\001\uff1b\000\162\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u0123\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\241\u0128\001\uff6e\000\004\227\u01d2\001\002\000\002" +
                            "\001\ufeae\000\020\011\206\013\070\074\015\106\u0173\116" +
                            "\204\212\057\231\115\001\002\000\004\226\u01d9\001\002" +
                            "\000\004\226\u01d6\001\ufe48\000\162\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u0123\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\241\u0128\001\uff6e\000\004\227\u01d8\001\002\000\002" +
                            "\001\ufec7\000\162\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\154\u0123\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\241\u0128\001" +
                            "\uff6e\000\004\227\u01db\001\002\000\002\001\ufec8\000\006" +
                            "\114\236\226\u01dd\001\ufebf\000\162\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u0123\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\241\u0128\001\uff6e\000\004\227\u01df\001\002\000\002" +
                            "\001\ufec9\000\020\011\206\013\070\074\015\106\u0173\116" +
                            "\204\212\057\231\115\001\002\000\004\226\u01e6\001\002" +
                            "\000\004\226\u01e3\001\ufe47\000\162\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u0123\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\241\u0128\001\uff6e\000\004\227\u01e5\001\002\000\002" +
                            "\001\ufec5\000\162\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\154\u0123\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\241\u0128\001" +
                            "\uff6e\000\004\227\u01e8\001\002\000\002\001\ufec6\000\062" +
                            "\034\u014c\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154" +
                            "\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\uff10\000\162" +
                            "\004\166\006\123\007\011\010\072\011\227\012\061\013" +
                            "\070\020\146\035\120\046\247\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\111\246\112\147\113\045\114\076\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\154\u01eb\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\241\u01ee\001\002\000\024\011" +
                            "\227\013\070\074\015\111\u01c7\114\u01c3\116\064\212\057" +
                            "\220\226\231\115\001\002\000\046\071\u0137\124\uff67\131" +
                            "\u012c\132\u0130\133\u012d\134\u0138\135\u0131\136\u0136\137\u0133" +
                            "\140\u0135\141\u012f\142\u012b\143\u0132\144\u0134\145\u012e\200" +
                            "\ufe51\201\ufe51\227\uff67\001\ufe53\000\006\124\uff68\227\uff68" +
                            "\001\ufe54\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\046\071" +
                            "\u0137\124\uff66\131\u012c\132\u0130\133\u012d\134\u0138\135\u0131" +
                            "\136\u0136\137\u0133\140\u0135\141\u012f\142\u012b\143\u0132\144" +
                            "\u0134\145\u012e\200\ufe51\201\ufe51\227\uff66\001\ufe53\000\006" +
                            "\124\uff65\227\uff65\001\ufe54\000\002\001\uff64\000\004\071" +
                            "\u0137\001\ufe52\000\002\001\uff69\000\002\001\ufeca\000\004" +
                            "\154\250\001\uffb2\000\004\226\u01f7\001\002\000\020\011" +
                            "\227\074\253\111\260\114\263\116\064\227\uff7c\237\257" +
                            "\001\uff73\000\004\227\u01f9\001\002\000\004\056\266\001" +
                            "\ufed1\000\004\106\u01fb\001\002\000\002\001\uffe8\000\254" +
                            "\003\134\004\166\005\200\006\123\007\011\010\072\011" +
                            "\037\012\061\013\070\015\107\020\146\021\024\022\142" +
                            "\023\137\024\050\026\036\030\116\032\201\035\120\037" +
                            "\150\043\063\044\140\045\102\046\124\050\157\051\013" +
                            "\052\044\054\176\056\273\057\012\061\111\062\171\063" +
                            "\034\064\274\065\035\066\164\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\106\074\107" +
                            "\u01fd\111\246\112\147\113\045\114\076\115\026\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\147" +
                            "\010\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\046\221\071\222\021" +
                            "\226\174\231\115\232\127\233\066\234\112\236\135\240" +
                            "\133\001\002\000\002\001\ufed6\000\002\001\ufe79\000\072" +
                            "\125\350\126\367\127\341\146\344\150\340\151\361\152" +
                            "\342\153\352\154\362\155\366\156\354\157\336\160\351" +
                            "\161\365\162\364\163\346\164\363\165\360\166\353\167" +
                            "\370\170\347\171\357\172\345\173\355\174\337\177\343" +
                            "\212\356\227\u0200\001\002\000\002\001\ufe7c\000\014\171" +
                            "\357\172\345\173\355\174\337\212\356\001\ufe82\000\052" +
                            "\006\123\007\011\010\072\011\227\020\230\074\220\075" +
                            "\023\076\051\077\054\100\153\101\006\102\211\111\234" +
                            "\112\147\113\045\114\217\116\064\212\222\220\226\240" +
                            "\133\001\002\000\004\213\u0204\001\002\000\002\001\ufe77" +
                            "\000\006\011\u0206\065\u0207\001\002\000\002\001\ufe6a\000" +
                            "\002\001\ufe69\000\052\006\123\007\011\010\072\011\227" +
                            "\020\230\074\220\075\023\076\051\077\054\100\153\101" +
                            "\006\102\211\111\234\112\147\113\045\114\217\116\064" +
                            "\212\222\220\226\240\133\001\002\000\004\213\u020a\001" +
                            "\002\000\002\001\ufe76\000\004\124\u0211\001\ufe5b\000\072" +
                            "\072\u020f\125\350\126\367\127\341\146\344\150\340\151" +
                            "\361\152\342\153\352\154\362\155\366\156\354\157\336" +
                            "\160\351\161\365\162\364\163\346\164\363\165\360\166" +
                            "\353\167\370\170\347\171\357\172\345\173\355\174\337" +
                            "\177\343\212\356\001\ufe56\000\004\213\u020e\001\002\000" +
                            "\002\001\ufe7a\000\064\006\123\007\011\010\072\011\227" +
                            "\020\230\074\220\075\023\076\051\077\054\100\153\101" +
                            "\006\102\211\111\234\112\147\113\045\114\217\116\064" +
                            "\167\231\170\215\175\212\176\210\212\222\220\226\226" +
                            "\232\240\133\001\002\000\070\125\350\126\367\127\341" +
                            "\146\344\150\340\151\361\152\342\153\352\154\362\155" +
                            "\366\156\354\157\336\160\351\161\365\162\364\163\346" +
                            "\164\363\165\360\166\353\167\370\170\347\171\357\172" +
                            "\345\173\355\174\337\177\343\212\356\001\ufe57\000\064" +
                            "\006\123\007\011\010\072\011\227\020\230\074\220\075" +
                            "\023\076\051\077\054\100\153\101\006\102\211\111\234" +
                            "\112\147\113\045\114\217\116\064\167\231\170\215\175" +
                            "\212\176\210\212\222\220\226\226\232\240\133\001\ufe5a" +
                            "\000\002\001\ufe5c\000\072\072\u0214\125\350\126\367\127" +
                            "\341\146\344\150\340\151\361\152\342\153\352\154\362" +
                            "\155\366\156\354\157\336\160\351\161\365\162\364\163" +
                            "\346\164\363\165\360\166\353\167\370\170\347\171\357" +
                            "\172\345\173\355\174\337\177\343\212\356\001\ufe58\000" +
                            "\064\006\123\007\011\010\072\011\227\020\230\074\220" +
                            "\075\023\076\051\077\054\100\153\101\006\102\211\111" +
                            "\234\112\147\113\045\114\217\116\064\167\231\170\215" +
                            "\175\212\176\210\212\222\220\226\226\232\240\133\001" +
                            "\002\000\070\125\350\126\367\127\341\146\344\150\340" +
                            "\151\361\152\342\153\352\154\362\155\366\156\354\157" +
                            "\336\160\351\161\365\162\364\163\346\164\363\165\360" +
                            "\166\353\167\370\170\347\171\357\172\345\173\355\174" +
                            "\337\177\343\212\356\001\ufe59\000\156\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\245\226\174\231\115\232\127\233\066\234\112\240\133" +
                            "\001\ufe3a\000\004\213\u0218\001\002\000\002\001\ufe78\000" +
                            "\064\006\123\007\011\010\072\011\227\020\230\074\220" +
                            "\075\023\076\051\077\054\100\153\101\006\102\211\111" +
                            "\234\112\147\113\045\114\217\116\064\167\231\170\215" +
                            "\175\212\176\210\212\222\220\226\226\232\240\133\001" +
                            "\ufe5d\000\004\227\u021b\001\002\000\002\001\ufe7b\000\006" +
                            "\110\ufebf\114\236\001\ufe6f\000\014\171\357\172\345\173" +
                            "\355\174\337\212\356\001\ufe81\000\004\212\356\001\ufe7f" +
                            "\000\002\001\ufe9e\000\004\103\u0221\001\002\000\002\001" +
                            "\ufe9f\000\004\212\356\001\ufe80\000\240\003\134\004\166" +
                            "\005\200\006\123\007\011\010\072\011\037\012\061\013" +
                            "\070\015\107\020\146\021\024\022\142\023\137\024\050" +
                            "\026\036\030\116\032\201\035\120\037\150\043\063\044" +
                            "\140\045\102\046\247\050\157\051\013\052\044\054\176" +
                            "\056\273\057\012\061\111\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\226\174\230" +
                            "\u0229\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\006\011\206\116\204\001\002\000\004\131\u0226\001" +
                            "\002\000\064\006\123\007\011\010\072\011\227\020\230" +
                            "\074\220\075\023\076\051\077\054\100\153\101\006\102" +
                            "\211\111\234\112\147\113\045\114\217\116\064\167\231" +
                            "\170\215\175\212\176\210\212\222\220\226\226\232\240" +
                            "\133\001\002\000\070\125\350\126\367\127\341\146\344" +
                            "\150\340\151\361\152\342\153\352\154\362\155\366\156" +
                            "\354\157\336\160\351\161\365\162\364\163\346\164\363" +
                            "\165\360\166\353\167\370\170\347\171\357\172\345\173" +
                            "\355\174\337\177\343\212\356\001\uff91\000\002\001\uffc9" +
                            "\000\002\001\uffe8\000\002\001\uff94\000\254\003\134\004" +
                            "\166\005\200\006\123\007\011\010\072\011\037\012\061" +
                            "\013\070\015\107\020\146\021\024\022\142\023\137\024" +
                            "\050\026\036\030\116\032\201\033\u022c\035\120\037\150" +
                            "\043\063\044\140\045\102\046\124\050\157\051\013\052" +
                            "\044\054\176\056\273\057\012\061\111\062\171\063\034" +
                            "\064\274\065\035\066\164\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\106\074\111\246" +
                            "\112\147\113\045\114\076\115\026\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\147\010\167\121" +
                            "\170\100\175\167\176\016\200\060\201\175\202\032\203" +
                            "\151\204\043\205\145\206\105\207\154\210\101\211\041" +
                            "\212\057\214\110\220\046\221\071\222\021\226\174\231" +
                            "\115\232\127\233\066\234\112\236\135\240\133\001\002" +
                            "\000\002\001\uff93\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\072\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\227\u022f\001\002\000\240\003\134\004\166" +
                            "\005\200\006\123\007\011\010\072\011\037\012\061\013" +
                            "\070\015\107\020\146\021\024\022\142\023\137\024\050" +
                            "\026\036\030\116\032\201\035\120\037\150\043\063\044" +
                            "\140\045\102\046\247\050\157\051\013\052\044\054\176" +
                            "\056\273\057\012\061\111\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\226\174\230" +
                            "\u0230\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\002\001\uffe8\000\002\001\uff85\000\006\216\u0235\217" +
                            "\u0234\001\uff81\000\002\001\uffe0\000\236\003\134\004\166" +
                            "\005\200\006\123\007\011\010\072\011\037\012\061\013" +
                            "\070\015\107\020\146\021\024\022\142\023\137\024\050" +
                            "\026\036\030\116\032\201\035\120\037\150\043\063\044" +
                            "\140\045\102\046\247\050\157\051\013\052\044\054\176" +
                            "\056\273\057\012\061\111\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\004" +
                            "\226\u0236\001\002\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\072\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\227\u0238\001\002\000\236\003\134\004\166" +
                            "\005\200\006\123\007\011\010\072\011\037\012\061\013" +
                            "\070\015\107\020\146\021\024\022\142\023\137\024\050" +
                            "\026\036\030\116\032\201\035\120\037\150\043\063\044" +
                            "\140\045\102\046\247\050\157\051\013\052\044\054\176" +
                            "\056\273\057\012\061\111\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\002" +
                            "\001\uff84\000\002\001\uff80\000\252\003\134\004\166\005" +
                            "\200\006\123\007\011\010\072\011\037\012\061\013\070" +
                            "\015\107\020\146\021\024\022\142\023\137\024\050\026" +
                            "\036\030\116\032\201\035\120\037\150\043\063\044\140" +
                            "\045\102\046\124\050\157\051\013\052\044\054\176\056" +
                            "\273\057\012\061\111\062\171\063\034\064\274\065\035" +
                            "\066\164\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\106\074\111\246\112\147\113\045" +
                            "\114\076\115\026\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\147\010\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\046\221\071\222\021\226\174\231\115\232\127\233" +
                            "\066\234\112\236\135\240\133\001\uff83\000\006\216\u023f" +
                            "\217\u023e\001\uff7f\000\004\215\u0247\001\002\000\004\230" +
                            "\u0245\001\002\000\004\226\u0240\001\002\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\072\034\u014c\125\u0144\126\u0154\127" +
                            "\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d" +
                            "\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163" +
                            "\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a" +
                            "\172\u0141\173\u0149\174\u013b\177\u013f\227\u0242\001\002\000" +
                            "\004\230\u0243\001\002\000\002\001\uffe8\000\252\003\134" +
                            "\004\166\005\200\006\123\007\011\010\072\011\037\012" +
                            "\061\013\070\015\107\020\146\021\024\022\142\023\137" +
                            "\024\050\026\036\030\116\032\201\035\120\037\150\043" +
                            "\063\044\140\045\102\046\124\050\157\051\013\052\044" +
                            "\054\176\056\273\057\012\061\111\062\171\063\034\064" +
                            "\274\065\035\066\164\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\106\074\111\246\112" +
                            "\147\113\045\114\076\115\026\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\147\010\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\046\221\071\222\021\226\174\231\115" +
                            "\232\127\233\066\234\112\236\135\240\133\001\uff82\000" +
                            "\002\001\uffe8\000\252\003\134\004\166\005\200\006\123" +
                            "\007\011\010\072\011\037\012\061\013\070\015\107\020" +
                            "\146\021\024\022\142\023\137\024\050\026\036\030\116" +
                            "\032\201\035\120\037\150\043\063\044\140\045\102\046" +
                            "\124\050\157\051\013\052\044\054\176\056\273\057\012" +
                            "\061\111\062\171\063\034\064\274\065\035\066\164\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\106\074\111\246\112\147\113\045\114\076\115" +
                            "\026\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\147\010\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\046\221" +
                            "\071\222\021\226\174\231\115\232\127\233\066\234\112" +
                            "\236\135\240\133\001\uff7e\000\004\147\u0248\001\002\000" +
                            "\002\001\uffdf\000\072\034\u014c\125\u0144\126\u0154\127\u013d" +
                            "\146\u0140\147\u024a\150\u013c\151\u014e\152\u013e\153\u0146\154" +
                            "\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\002\000\002" +
                            "\001\uffc6\000\002\001\uff0a\000\004\071\u0137\001\ufe51\000" +
                            "\004\227\u0252\001\ufeea\000\072\034\u014c\125\u0144\126\u0154" +
                            "\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154" +
                            "\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\227\u0251\001\002" +
                            "\000\004\227\u0250\001\002\000\002\001\ufee9\000\002\001" +
                            "\ufeeb\000\002\001\uff24\000\026\011\227\013\070\073\u0258" +
                            "\074\015\111\u01c7\114\u01c3\116\064\212\057\220\226\231" +
                            "\115\001\ufe2b\000\002\001\ufe2c\000\006\124\u025c\227\u025e" +
                            "\001\002\000\002\001\ufe2e\000\004\071\u0137\001\ufe2d\000" +
                            "\004\226\u0259\001\002\000\026\011\227\013\070\073\u0258" +
                            "\074\015\111\u01c7\114\u01c3\116\064\212\057\220\226\231" +
                            "\115\001\ufe2b\000\006\124\u025c\227\u025b\001\002\000\002" +
                            "\001\uffa0\000\026\011\227\013\070\073\u0258\074\015\111" +
                            "\u01c7\114\u01c3\116\064\212\057\220\226\231\115\001\ufe2b" +
                            "\000\002\001\ufe2f\000\004\131\u025f\001\002\000\156\004" +
                            "\166\006\123\007\011\010\072\011\227\012\061\013\070" +
                            "\020\146\035\120\046\247\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\111\246\112\147\113\045\114\076\116\064\117\033\120" +
                            "\103\121\056\122\144\123\122\130\073\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\245\226\174\231\115\232\127\233\066\234" +
                            "\112\240\133\001\002\000\062\034\u014c\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\uff1e\000\020\011\206\013\070\074\015" +
                            "\106\u0173\116\204\212\057\231\115\001\002\000\004\226" +
                            "\u0268\001\uff23\000\010\106\u0187\212\u0188\226\u0264\001\uff22" +
                            "\000\162\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\154" +
                            "\u0123\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\241\u0128\001\uff6e\000" +
                            "\004\227\u0266\001\002\000\002\001\ufe38\000\004\212\u01af" +
                            "\001\uff20\000\162\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\154\u0123\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\241\u0128\001" +
                            "\uff6e\000\004\227\u026a\001\002\000\002\001\ufe38\000\004" +
                            "\212\u01af\001\uff21\000\024\011\227\013\070\074\015\111" +
                            "\u01c7\114\u01c3\116\064\212\057\220\226\231\115\001\002" +
                            "\000\004\071\u0137\001\ufe0b\000\006\124\u0270\227\u026f\001" +
                            "\002\000\002\001\ufe12\000\024\011\227\013\070\074\015" +
                            "\111\u01c7\114\u01c3\116\064\212\057\220\226\231\115\001" +
                            "\002\000\004\071\u0137\001\ufe0a\000\004\034\u014c\001\ufef6" +
                            "\000\160\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\227\u0276\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\002\001" +
                            "\ufedd\000\072\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140" +
                            "\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156" +
                            "\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f" +
                            "\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173" +
                            "\u0149\174\u013b\177\u013f\227\u0277\001\002\000\002\001\ufeb4" +
                            "\000\002\001\ufeb3\000\020\011\u0279\013\070\074\015\106" +
                            "\u0173\116\204\212\057\231\115\001\002\000\004\226\ufe05" +
                            "\001\ufe07\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\072\034" +
                            "\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\213\u027c\001\002\000\002\001\ufe74\000\002\001\uffd6" +
                            "\000\044\071\u0137\131\u012c\132\u0130\133\u012d\134\u0138\135" +
                            "\u0131\136\u0136\137\u0133\140\u0135\141\u012f\142\u012b\143\u0132" +
                            "\144\u0134\145\u012e\147\u0281\200\ufe51\201\ufe51\001\ufe53\000" +
                            "\004\147\u0280\001\ufe54\000\002\001\uffd5\000\002\001\uffd4" +
                            "\000\002\001\uffd3\000\004\131\u0284\001\002\000\064\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\167\231\170\215\175\212" +
                            "\176\210\212\222\220\226\226\232\240\133\001\002\000" +
                            "\070\125\350\126\367\127\341\146\344\150\340\151\361" +
                            "\152\342\153\352\154\362\155\366\156\354\157\336\160" +
                            "\351\161\365\162\364\163\346\164\363\165\360\166\353" +
                            "\167\370\170\347\171\357\172\345\173\355\174\337\177" +
                            "\343\212\356\001\uff2b\000\002\001\ufedf\000\002\001\ufee3" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\072\034\u014c\125" +
                            "\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e" +
                            "\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161" +
                            "\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\227" +
                            "\u028a\001\002\000\006\106\u028c\230\u028d\001\002\000\002" +
                            "\001\uffdb\000\004\147\u029d\001\uff8c\000\004\147\u028f\001" +
                            "\uff8c\000\010\040\u029b\041\u0292\042\u0293\001\002\000\002" +
                            "\001\uff8c\000\010\040\u0291\041\u0292\042\u0293\001\002\000" +
                            "\002\001\uff8d\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\006" +
                            "\147\u0295\230\u0296\001\002\000\002\001\uffe8\000\002\001" +
                            "\uff88\000\002\001\uff89\000\252\003\134\004\166\005\200" +
                            "\006\123\007\011\010\072\011\037\012\061\013\070\015" +
                            "\107\020\146\021\024\022\142\023\137\024\050\026\036" +
                            "\030\116\032\201\035\120\037\150\043\063\044\140\045" +
                            "\102\046\124\050\157\051\013\052\044\054\176\056\273" +
                            "\057\012\061\111\062\171\063\034\064\274\065\035\066" +
                            "\164\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\106\074\111\246\112\147\113\045\114" +
                            "\076\115\026\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\147\010\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\046\221\071\222\021\226\174\231\115\232\127\233\066" +
                            "\234\112\236\135\240\133\001\uff8a\000\074\034\u014c\125" +
                            "\u0144\126\u0154\127\u013d\146\u0140\147\u0295\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\230\u0296\001\002\000\002\001\uffe8\000\252\003\134" +
                            "\004\166\005\200\006\123\007\011\010\072\011\037\012" +
                            "\061\013\070\015\107\020\146\021\024\022\142\023\137" +
                            "\024\050\026\036\030\116\032\201\035\120\037\150\043" +
                            "\063\044\140\045\102\046\124\050\157\051\013\052\044" +
                            "\054\176\056\273\057\012\061\111\062\171\063\034\064" +
                            "\274\065\035\066\164\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\106\074\111\246\112" +
                            "\147\113\045\114\076\115\026\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\147\010\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\046\221\071\222\021\226\174\231\115" +
                            "\232\127\233\066\234\112\236\135\240\133\001\uff8b\000" +
                            "\002\001\uff8e\000\010\041\u0292\042\u0293\107\u02a0\001\002" +
                            "\000\002\001\uff8c\000\010\041\u0292\042\u0293\107\u029f\001" +
                            "\002\000\002\001\uff8f\000\002\001\uff90\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\072\034\u014c\125\u0144\126\u0154\127" +
                            "\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d" +
                            "\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163" +
                            "\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a" +
                            "\172\u0141\173\u0149\174\u013b\177\u013f\213\u02a3\001\002\000" +
                            "\002\001\ufead\000\002\001\ufee1\000\070\034\u014c\125\u0144" +
                            "\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153" +
                            "\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151" +
                            "\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170" +
                            "\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufe0d" +
                            "\000\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150" +
                            "\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff29\000\006\124\u02a8\147\u02a9\001" +
                            "\002\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\002\001\uffd0" +
                            "\000\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150" +
                            "\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147" +
                            "\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165" +
                            "\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149" +
                            "\174\u013b\177\u013f\001\uff2a\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\072\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140" +
                            "\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156" +
                            "\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f" +
                            "\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173" +
                            "\u0149\174\u013b\177\u013f\213\u02ad\001\002\000\002\001\ufe73" +
                            "\000\002\001\uffd8\000\072\034\u014c\125\u0144\126\u0154\127" +
                            "\u013d\146\u0140\147\u02b0\150\u013c\151\u014e\152\u013e\153\u0146" +
                            "\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162" +
                            "\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143" +
                            "\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\002\000" +
                            "\002\001\uffd7\000\004\024\u02b2\001\002\000\004\226\u02b3" +
                            "\001\002\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\072\034" +
                            "\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\227\u02b5\001\002\000\004\147\u02b6\001\002\000\002" +
                            "\001\uffdd\000\004\011\u02b9\001\002\000\002\001\ufff0\000" +
                            "\004\131\u02ba\001\002\000\064\006\123\007\011\010\072" +
                            "\011\227\020\230\074\220\075\023\076\051\077\054\100" +
                            "\153\101\006\102\211\111\234\112\147\113\045\114\217" +
                            "\116\064\167\231\170\215\175\212\176\210\212\222\220" +
                            "\226\226\232\240\133\001\002\000\070\125\350\126\367" +
                            "\127\341\146\344\150\340\151\361\152\342\153\352\154" +
                            "\362\155\366\156\354\157\336\160\351\161\365\162\364" +
                            "\163\346\164\363\165\360\166\353\167\370\170\347\171" +
                            "\357\172\345\173\355\174\337\177\343\212\356\001\uff2c" +
                            "\000\004\067\u02be\001\uffa6\000\004\106\u02c3\001\002\000" +
                            "\012\011\227\111\260\114\263\116\064\001\002\000\004" +
                            "\124\u02c1\001\uffa5\000\002\001\uffa2\000\012\011\227\111" +
                            "\260\114\263\116\064\001\002\000\002\001\uffa1\000\002" +
                            "\001\uff59\000\030\047\155\056\u02d2\060\u02d5\107\u02cf\115" +
                            "\u02ce\220\u02d1\221\u02c8\222\u02c9\223\u02cc\224\u02c7\225\u02d0" +
                            "\001\uff3a\000\002\001\uff54\000\004\046\u0301\001\002\000" +
                            "\002\001\uff35\000\002\001\uff32\000\002\001\uff31\000\002" +
                            "\001\uff5a\000\020\046\uff39\220\u02d1\221\u02c8\222\u02c9\223" +
                            "\u02cc\224\u02c7\225\u02d0\001\uff3c\000\002\001\uff34\000\002" +
                            "\001\uff38\000\236\003\134\004\166\005\200\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\015\107\020\146" +
                            "\021\024\022\142\023\137\024\050\026\036\030\116\032" +
                            "\201\035\120\037\150\043\063\044\140\045\102\046\247" +
                            "\050\157\051\013\052\044\054\176\056\273\057\012\061" +
                            "\111\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\106\074\111\246\112" +
                            "\147\113\045\114\076\115\026\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\147\010\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\046\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\002\000\002\001\uffae\000\002\001" +
                            "\uff36\000\002\001\uff33\000\012\011\227\111\260\114\263" +
                            "\116\064\001\002\000\004\013\u02d7\001\002\000\006\124" +
                            "\u02b7\147\u02d6\001\002\000\002\001\uff3b\000\002\001\uff57" +
                            "\000\004\131\u02de\001\uff2e\000\006\124\u02d9\147\u02da\001" +
                            "\002\000\004\013\u02db\001\002\000\002\001\uff58\000\004" +
                            "\131\u02dc\001\uff30\000\064\006\123\007\011\010\072\011" +
                            "\227\020\230\074\220\075\023\076\051\077\054\100\153" +
                            "\101\006\102\211\111\234\112\147\113\045\114\217\116" +
                            "\064\167\231\170\215\175\212\176\210\212\222\220\226" +
                            "\226\232\240\133\001\002\000\070\125\350\126\367\127" +
                            "\341\146\344\150\340\151\361\152\342\153\352\154\362" +
                            "\155\366\156\354\157\336\160\351\161\365\162\364\163" +
                            "\346\164\363\165\360\166\353\167\370\170\347\171\357" +
                            "\172\345\173\355\174\337\177\343\212\356\001\uff2f\000" +
                            "\064\006\123\007\011\010\072\011\227\020\230\074\220" +
                            "\075\023\076\051\077\054\100\153\101\006\102\211\111" +
                            "\234\112\147\113\045\114\217\116\064\167\231\170\215" +
                            "\175\212\176\210\212\222\220\226\226\232\240\133\001" +
                            "\002\000\070\125\350\126\367\127\341\146\344\150\340" +
                            "\151\361\152\342\153\352\154\362\155\366\156\354\157" +
                            "\336\160\351\161\365\162\364\163\346\164\363\165\360" +
                            "\166\353\167\370\170\347\171\357\172\345\173\355\174" +
                            "\337\177\343\212\356\001\uff2d\000\010\106\u02e3\124\u02e2" +
                            "\147\u02e5\001\002\000\002\001\uff52\000\012\011\227\111" +
                            "\260\114\263\116\064\001\002\000\012\011\u02ee\111\260" +
                            "\114\263\116\064\001\uff4e\000\002\001\uff53\000\002\001" +
                            "\uff50\000\004\036\u02fa\001\002\000\004\147\u02f9\001\002" +
                            "\000\012\011\u02ee\111\260\114\263\116\064\001\uff4d\000" +
                            "\004\107\u02f7\001\002\000\004\235\u02f2\001\uff44\000\004" +
                            "\110\u02f0\001\002\000\004\147\u02ef\001\002\000\002\001" +
                            "\uff4c\000\004\036\uff45\001\uffff\000\002\001\uff4a\000\004" +
                            "\011\u02f1\001\002\000\002\001\uff43\000\012\011\227\111" +
                            "\260\114\263\116\064\001\002\000\004\124\u02f5\001\uff48" +
                            "\000\002\001\uff47\000\012\011\227\111\260\114\263\116" +
                            "\064\001\002\000\002\001\uff46\000\002\001\uff4f\000\002" +
                            "\001\uff4b\000\002\001\uff49\000\016\220\u02d1\221\u02c8\222" +
                            "\u02c9\223\u02cc\224\u02c7\225\u02d0\001\uff40\000\004\011\u02fd" +
                            "\001\002\000\004\147\uff41\001\uff3f\000\002\001\uff42\000" +
                            "\002\001\uff51\000\002\001\uff55\000\002\001\uff37\000\004" +
                            "\154\250\001\uffb2\000\006\011\206\116\204\001\002\000" +
                            "\004\226\u0304\001\002\000\020\011\227\074\253\111\260" +
                            "\114\263\116\064\227\uff7c\237\257\001\uff73\000\004\227" +
                            "\u0306\001\002\000\006\106\u0308\147\u0309\001\002\000\002" +
                            "\001\uff56\000\002\001\uffe8\000\002\001\uff3e\000\254\003" +
                            "\134\004\166\005\200\006\123\007\011\010\072\011\037" +
                            "\012\061\013\070\015\107\020\146\021\024\022\142\023" +
                            "\137\024\050\026\036\030\116\032\201\035\120\037\150" +
                            "\043\063\044\140\045\102\046\124\050\157\051\013\052" +
                            "\044\054\176\056\273\057\012\061\111\062\171\063\034" +
                            "\064\274\065\035\066\164\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\106\074\107\u030b" +
                            "\111\246\112\147\113\045\114\076\115\026\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\147\010" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\046\221\071\222\021\226" +
                            "\174\231\115\232\127\233\066\234\112\236\135\240\133" +
                            "\001\002\000\002\001\uff3d\000\006\071\u0321\212\u0320\001" +
                            "\ufe1b\000\016\013\070\016\u031e\017\u031f\104\u0310\105\u030f" +
                            "\232\u031d\001\002\000\002\001\ufe1d\000\024\011\227\013" +
                            "\070\074\015\111\u01c7\114\u01c3\116\064\212\057\220\226" +
                            "\231\115\001\002\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\u0314\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\010\013\070\104\u0310\105\u030f\001\002\000\002\001\ufe1c" +
                            "\000\072\034\u014c\107\u0319\125\u0144\126\u0154\127\u013d\146" +
                            "\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152" +
                            "\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164" +
                            "\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141" +
                            "\173\u0149\174\u013b\177\u013f\001\002\000\004\212\u0315\001" +
                            "\ufe68\000\156\004\166\006\123\007\011\010\072\011\227" +
                            "\012\061\013\070\020\146\035\120\046\247\062\171\063" +
                            "\034\073\173\074\015\075\023\076\051\077\054\100\153" +
                            "\101\006\102\040\111\246\112\147\113\045\114\076\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\072\034\u014c" +
                            "\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152" +
                            "\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145" +
                            "\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167" +
                            "\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f" +
                            "\213\u0317\001\002\000\004\107\u0318\001\002\000\002\001" +
                            "\ufe17\000\002\001\ufe18\000\006\071\u0137\107\u031b\001\002" +
                            "\000\002\001\ufe16\000\002\001\ufe20\000\002\001\ufe62\000" +
                            "\002\001\ufe1e\000\002\001\ufe1f\000\012\011\206\013\070" +
                            "\014\u0326\116\204\001\002\000\006\011\206\116\204\001" +
                            "\002\000\002\001\ufe19\000\002\001\ufe13\000\004\213\u0327" +
                            "\001\002\000\002\001\ufe15\000\002\001\ufe14\000\002\001" +
                            "\ufe1a\000\010\011\206\116\204\226\252\001\002\000\004" +
                            "\226\u032a\001\002\000\020\011\227\074\253\111\260\114" +
                            "\263\116\064\227\uff7c\237\257\001\uff73\000\004\227\u032c" +
                            "\001\002\000\004\106\u032d\001\002\000\002\001\uffe8\000" +
                            "\254\003\134\004\166\005\200\006\123\007\011\010\072" +
                            "\011\037\012\061\013\070\015\107\020\146\021\024\022" +
                            "\142\023\137\024\050\026\036\030\116\032\201\035\120" +
                            "\037\150\043\063\044\140\045\102\046\124\050\157\051" +
                            "\013\052\044\054\176\056\273\057\012\061\111\062\171" +
                            "\063\034\064\274\065\035\066\164\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\106\074" +
                            "\107\u032f\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\221\071\222" +
                            "\021\226\174\231\115\232\127\233\066\234\112\236\135" +
                            "\240\133\001\002\000\002\001\uffb0\000\070\034\u014c\125" +
                            "\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e" +
                            "\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161" +
                            "\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001" +
                            "\ufe0c\000\014\034\u014c\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\001\ufef8\000\002\001\uff1a\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\044\036\uff9f\071\u0137\131\u012c\132\u0130\133\u012d" +
                            "\134\u0138\135\u0131\136\u0136\137\u0133\140\u0135\141\u012f\142" +
                            "\u012b\143\u0132\144\u0134\145\u012e\200\ufe51\201\ufe51\001\ufe53" +
                            "\000\004\036\uff9e\001\ufe54\000\004\036\u0337\001\002\000" +
                            "\030\011\227\013\070\073\u0258\074\015\111\u01c7\114\u01c3" +
                            "\116\064\154\u033c\212\057\220\226\231\115\001\002\000" +
                            "\002\001\uff9b\000\004\072\u0349\001\uff9c\000\004\227\u0347" +
                            "\001\002\000\004\071\u0137\001\uff9a\000\024\011\227\013" +
                            "\070\074\015\111\u01c7\114\u01c3\116\064\212\057\220\226" +
                            "\231\115\001\002\000\030\011\227\013\070\073\u0258\074" +
                            "\015\111\u01c7\114\u01c3\116\064\154\u033c\212\057\220\226" +
                            "\231\115\001\002\000\002\001\uff9c\000\004\227\u0340\001" +
                            "\002\000\240\003\134\004\166\005\200\006\123\007\011" +
                            "\010\072\011\037\012\061\013\070\015\107\020\146\021" +
                            "\024\022\142\023\137\024\050\026\036\030\116\032\201" +
                            "\035\120\037\150\043\063\044\140\045\102\046\247\050" +
                            "\157\051\013\052\044\054\176\056\273\057\012\061\111" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\106\074\111\246\112\147" +
                            "\113\045\114\076\115\026\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\147\010\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\046\226\174\230\u0341\231\115\232\127\233" +
                            "\066\234\112\240\133\001\002\000\002\001\uffe8\000\002" +
                            "\001\uff96\000\002\001\uffca\000\254\003\134\004\166\005" +
                            "\200\006\123\007\011\010\072\011\037\012\061\013\070" +
                            "\015\107\020\146\021\024\022\142\023\137\024\050\026" +
                            "\036\030\116\031\u0345\032\201\035\120\037\150\043\063" +
                            "\044\140\045\102\046\124\050\157\051\013\052\044\054" +
                            "\176\056\273\057\012\061\111\062\171\063\034\064\274" +
                            "\065\035\066\164\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\106\074\111\246\112\147" +
                            "\113\045\114\076\115\026\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\147\010\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\046\221\071\222\021\226\174\231\115\232" +
                            "\127\233\066\234\112\236\135\240\133\001\002\000\002" +
                            "\001\uff95\000\004\071\u0137\001\uff99\000\240\003\134\004" +
                            "\166\005\200\006\123\007\011\010\072\011\037\012\061" +
                            "\013\070\015\107\020\146\021\024\022\142\023\137\024" +
                            "\050\026\036\030\116\032\201\035\120\037\150\043\063" +
                            "\044\140\045\102\046\247\050\157\051\013\052\044\054" +
                            "\176\056\273\057\012\061\111\062\171\063\034\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\106\074\111\246\112\147\113\045\114\076\115\026" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\147\010\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\046\226\174" +
                            "\230\u0341\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\002\001\uffcb\000\002\001\uff9d\000\002\001\uff0d" +
                            "\000\002\001\uff0b\000\002\001\ufffb\000\010\106\u034e\114" +
                            "\236\147\u034f\001\002\000\002\001\ufffb\000\002\001\ufff6" +
                            "\000\256\003\134\004\166\005\200\006\123\007\011\010" +
                            "\072\011\037\012\061\013\070\015\107\020\146\021\024" +
                            "\022\142\023\137\024\050\026\036\030\116\032\201\035" +
                            "\120\037\150\043\063\044\140\045\102\046\124\047\155" +
                            "\050\157\051\013\052\044\054\176\056\031\057\012\061" +
                            "\111\062\171\063\034\064\065\065\035\066\164\073\173" +
                            "\074\015\075\023\076\051\077\054\100\153\101\006\102" +
                            "\040\106\074\107\u0351\111\113\112\147\113\045\114\076" +
                            "\115\026\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\147\010\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\046" +
                            "\221\071\222\021\226\174\231\115\232\127\233\066\234" +
                            "\112\236\135\240\133\001\002\000\002\001\ufff5\000\256" +
                            "\003\134\004\166\005\200\006\123\007\011\010\072\011" +
                            "\037\012\061\013\070\015\107\020\146\021\024\022\142" +
                            "\023\137\024\050\026\036\030\116\032\201\035\120\037" +
                            "\150\043\063\044\140\045\102\046\124\047\155\050\157" +
                            "\051\013\052\044\054\176\056\031\057\012\061\111\062" +
                            "\171\063\034\064\065\065\035\066\164\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\106" +
                            "\074\107\u0353\111\113\112\147\113\045\114\076\115\026" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\147\010\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\046\221\071" +
                            "\222\021\226\174\231\115\232\127\233\066\234\112\236" +
                            "\135\240\133\001\002\000\002\001\ufff4\000\016\013\070" +
                            "\016\u031e\017\u031f\104\u0310\105\u030f\234\u0355\001\002\000" +
                            "\002\001\ufe61\000\024\011\227\013\070\074\015\111\u01c7" +
                            "\114\u01c3\116\064\212\057\220\226\231\115\001\002\000" +
                            "\002\001\uffb9\000\004\071\u0137\001\uffb7\000\006\124\u035b" +
                            "\227\u035a\001\002\000\004\147\u035d\001\002\000\024\011" +
                            "\227\013\070\074\015\111\u01c7\114\u01c3\116\064\212\057" +
                            "\220\226\231\115\001\002\000\002\001\uffb8\000\002\001" +
                            "\uffcc\000\004\226\u01d0\001\ufeaf\000\002\001\uff1f\000\002" +
                            "\001\ufee0\000\010\106\u0176\212\u0177\226\ufe4a\001\ufe41\000" +
                            "\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\ufe0f\000\004\147\u0364\001\002\000\002" +
                            "\001\uffc5\000\002\001\ufede\000\014\034\u014c\171\u014a\172" +
                            "\u0141\173\u0149\174\u013b\001\ufef7\000\012\110\ufebf\114\236" +
                            "\212\ufebf\226\u01dd\001\ufe64\000\254\003\134\004\166\005" +
                            "\200\006\123\007\011\010\072\011\037\012\061\013\070" +
                            "\015\107\020\146\021\024\022\142\023\137\024\050\026" +
                            "\036\030\116\032\201\035\120\037\150\043\063\044\140" +
                            "\045\102\046\124\050\157\051\013\052\044\054\176\056" +
                            "\273\057\012\061\111\062\171\063\034\064\274\065\035" +
                            "\066\164\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\106\074\107\u0369\111\246\112\147" +
                            "\113\045\114\076\115\026\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\147\010\167\121\170\100" +
                            "\175\167\176\016\200\060\201\175\202\032\203\151\204" +
                            "\043\205\145\206\105\207\154\210\101\211\041\212\057" +
                            "\214\110\220\046\221\071\222\021\226\174\231\115\232" +
                            "\127\233\066\234\112\236\135\240\133\001\002\000\002" +
                            "\001\uffe1\000\062\034\u014c\146\u0140\150\u013c\151\u014e\152" +
                            "\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145" +
                            "\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167" +
                            "\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f" +
                            "\001\ufed8\000\002\001\uffac\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\022\011\u036f\013\070\065\u036e\074\015\106\u0173" +
                            "\116\204\212\057\231\115\001\002\000\004\212\ufe69\001" +
                            "\ufe08\000\006\212\ufe6a\226\ufe05\001\ufe09\000\072\034\u014c" +
                            "\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152" +
                            "\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145" +
                            "\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167" +
                            "\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f" +
                            "\213\u0371\001\002\000\002\001\ufe75\000\004\233\u0375\001" +
                            "\002\000\014\013\070\016\u031e\017\u031f\104\u0310\105\u030f" +
                            "\001\ufeb0\000\010\013\070\104\u0310\105\u030f\001\ufeb1\000" +
                            "\002\001\ufed9\000\004\227\u0377\001\002\000\004\147\u0378" +
                            "\001\002\000\002\001\ufff7\000\002\001\uffda\000\072\034" +
                            "\u014c\125\u0144\126\u0154\127\u013d\146\u0140\147\u037b\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\002\000\002\001\uffd9\000\002\001\uff0c" +
                            "\000\024\011\227\013\070\074\015\111\u01c7\114\u01c3\116" +
                            "\064\212\057\220\226\231\115\001\002\000\072\034\u014c" +
                            "\072\u038b\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\001\ufe25\000\004\124\u0382\001\ufe5b\000\004\213" +
                            "\u0381\001\002\000\002\001\ufed4\000\160\004\166\006\123" +
                            "\007\011\010\072\011\227\012\061\013\070\020\146\035" +
                            "\120\046\247\062\171\063\034\073\173\074\015\075\023" +
                            "\076\051\077\054\100\153\101\006\102\040\111\246\112" +
                            "\147\113\045\114\076\116\064\117\033\120\103\121\056" +
                            "\122\144\123\122\130\073\154\u0384\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\ufe5a\000\002\001\ufe29\000\024\011\227\013" +
                            "\070\074\015\111\u01c7\114\u01c3\116\064\212\057\220\226" +
                            "\231\115\001\002\000\072\034\u014c\072\u0386\125\u0144\126" +
                            "\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146" +
                            "\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162" +
                            "\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143" +
                            "\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufe27\000" +
                            "\160\004\166\006\123\007\011\010\072\011\227\012\061" +
                            "\013\070\020\146\035\120\046\247\062\171\063\034\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\111\246\112\147\113\045\114\076\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\154\u0387" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\245\226\174\231\115\232" +
                            "\127\233\066\234\112\240\133\001\002\000\024\011\227" +
                            "\013\070\074\015\111\u01c7\114\u01c3\116\064\212\057\220" +
                            "\226\231\115\001\002\000\070\034\u014c\125\u0144\126\u0154" +
                            "\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154" +
                            "\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150" +
                            "\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171" +
                            "\u014a\172\u0141\173\u0149\174\u013b\177\u013f\001\ufe28\000\002" +
                            "\001\ufe24\000\002\001\ufe23\000\160\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\154\u038c\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\024\011\227\013\070\074\015\111\u01c7" +
                            "\114\u01c3\116\064\212\057\220\226\231\115\001\002\000" +
                            "\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\ufe26\000\002\001\ufe22\000\002\001\ufe21" +
                            "\000\156\004\166\006\123\007\011\010\072\011\227\012" +
                            "\061\013\070\020\146\035\120\046\247\062\171\063\034" +
                            "\073\173\074\015\075\023\076\051\077\054\100\153\101" +
                            "\006\102\040\111\246\112\147\113\045\114\076\116\064" +
                            "\117\033\120\103\121\056\122\144\123\122\130\073\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\245\226\174\231\115\232\127" +
                            "\233\066\234\112\240\133\001\002\000\072\034\u014c\125" +
                            "\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e\152\u013e" +
                            "\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160\u0145\161" +
                            "\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148\167\u0153" +
                            "\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177\u013f\227" +
                            "\u0392\001\002\000\002\001\ufe0e\000\004\067\u0394\001\uffa9" +
                            "\000\012\011\227\111\260\114\263\116\064\001\002\000" +
                            "\004\070\u0397\001\uffa4\000\004\106\u0399\001\002\000\012" +
                            "\011\227\111\260\114\263\116\064\001\002\000\004\124" +
                            "\u02c1\001\uffa3\000\002\001\uff59\000\030\047\155\056\u02d2" +
                            "\060\u02d5\107\u039b\115\u02ce\220\u02d1\221\u02c8\222\u02c9\223" +
                            "\u02cc\224\u02c7\225\u02d0\001\uff3a\000\002\001\uffaf\000\002" +
                            "\001\uffa8\000\156\004\166\006\123\007\011\010\072\011" +
                            "\227\012\061\013\070\020\146\035\120\046\247\062\171" +
                            "\063\034\073\173\074\015\075\023\076\051\077\054\100" +
                            "\153\101\006\102\040\111\246\112\147\113\045\114\076" +
                            "\116\064\117\033\120\103\121\056\122\144\123\122\130" +
                            "\073\167\121\170\100\175\167\176\016\200\060\201\175" +
                            "\202\032\203\151\204\043\205\145\206\105\207\154\210" +
                            "\101\211\041\212\057\214\110\220\245\226\174\231\115" +
                            "\232\127\233\066\234\112\240\133\001\002\000\072\034" +
                            "\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151\u014e" +
                            "\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a\160" +
                            "\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166\u0148" +
                            "\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b\177" +
                            "\u013f\227\u039f\001\002\000\240\003\134\004\166\005\200" +
                            "\006\123\007\011\010\072\011\037\012\061\013\070\015" +
                            "\107\020\146\021\024\022\142\023\137\024\050\026\036" +
                            "\030\116\032\201\035\120\037\150\043\063\044\140\045" +
                            "\102\046\247\050\157\051\013\052\044\054\176\056\273" +
                            "\057\012\061\111\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\106\074" +
                            "\111\246\112\147\113\045\114\076\115\026\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\147\010" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\046\226\174\230\u03a0\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\002" +
                            "\001\uffe8\000\002\001\uffde\000\002\001\uff87\000\254\003" +
                            "\134\004\166\005\200\006\123\007\011\010\072\011\037" +
                            "\012\061\013\070\015\107\020\146\021\024\022\142\023" +
                            "\137\024\050\025\u03a4\026\036\030\116\032\201\035\120" +
                            "\037\150\043\063\044\140\045\102\046\124\050\157\051" +
                            "\013\052\044\054\176\056\273\057\012\061\111\062\171" +
                            "\063\034\064\274\065\035\066\164\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\106\074" +
                            "\111\246\112\147\113\045\114\076\115\026\116\064\117" +
                            "\033\120\103\121\056\122\144\123\122\130\073\147\010" +
                            "\167\121\170\100\175\167\176\016\200\060\201\175\202" +
                            "\032\203\151\204\043\205\145\206\105\207\154\210\101" +
                            "\211\041\212\057\214\110\220\046\221\071\222\021\226" +
                            "\174\231\115\232\127\233\066\234\112\236\135\240\133" +
                            "\001\002\000\002\001\uff86\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\ufe3a\000\004\213\u03a7\001\002\000\002\001\ufec3\000\004" +
                            "\131\u03af\001\uff5c\000\006\124\u03aa\147\u03ab\001\002\000" +
                            "\004\013\u03ac\001\002\000\002\001\uffd1\000\004\131\u03ad" +
                            "\001\uff5e\000\064\006\123\007\011\010\072\011\227\020" +
                            "\230\074\220\075\023\076\051\077\054\100\153\101\006" +
                            "\102\211\111\234\112\147\113\045\114\217\116\064\167" +
                            "\231\170\215\175\212\176\210\212\222\220\226\226\232" +
                            "\240\133\001\002\000\070\125\350\126\367\127\341\146" +
                            "\344\150\340\151\361\152\342\153\352\154\362\155\366" +
                            "\156\354\157\336\160\351\161\365\162\364\163\346\164" +
                            "\363\165\360\166\353\167\370\170\347\171\357\172\345" +
                            "\173\355\174\337\177\343\212\356\001\uff5d\000\064\006" +
                            "\123\007\011\010\072\011\227\020\230\074\220\075\023" +
                            "\076\051\077\054\100\153\101\006\102\211\111\234\112" +
                            "\147\113\045\114\217\116\064\167\231\170\215\175\212" +
                            "\176\210\212\222\220\226\226\232\240\133\001\002\000" +
                            "\070\125\350\126\367\127\341\146\344\150\340\151\361" +
                            "\152\342\153\352\154\362\155\366\156\354\157\336\160" +
                            "\351\161\365\162\364\163\346\164\363\165\360\166\353" +
                            "\167\370\170\347\171\357\172\345\173\355\174\337\177" +
                            "\343\212\356\001\uff5b\000\002\001\uffe8\000\254\003\134" +
                            "\004\166\005\200\006\123\007\011\010\072\011\037\012" +
                            "\061\013\070\015\107\020\146\021\024\022\142\023\137" +
                            "\024\050\026\036\030\116\032\201\035\120\037\150\043" +
                            "\063\044\140\045\102\046\124\050\157\051\013\052\044" +
                            "\054\176\056\273\057\012\061\111\062\171\063\034\064" +
                            "\274\065\035\066\164\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\106\074\107\u03b3\111" +
                            "\246\112\147\113\045\114\076\115\026\116\064\117\033" +
                            "\120\103\121\056\122\144\123\122\130\073\147\010\167" +
                            "\121\170\100\175\167\176\016\200\060\201\175\202\032" +
                            "\203\151\204\043\205\145\206\105\207\154\210\101\211" +
                            "\041\212\057\214\110\220\046\221\071\222\021\226\174" +
                            "\231\115\232\127\233\066\234\112\236\135\240\133\001" +
                            "\002\000\004\053\u03b4\001\uffc0\000\004\226\u03bf\001\002" +
                            "\000\002\001\uffbf\000\004\055\u03bb\001\uffbb\000\004\053" +
                            "\u03b4\001\uffc1\000\002\001\uffbe\000\002\001\uffbc\000\002" +
                            "\001\uffc7\000\004\106\u03bc\001\002\000\002\001\uffe8\000" +
                            "\254\003\134\004\166\005\200\006\123\007\011\010\072" +
                            "\011\037\012\061\013\070\015\107\020\146\021\024\022" +
                            "\142\023\137\024\050\026\036\030\116\032\201\035\120" +
                            "\037\150\043\063\044\140\045\102\046\124\050\157\051" +
                            "\013\052\044\054\176\056\273\057\012\061\111\062\171" +
                            "\063\034\064\274\065\035\066\164\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\106\074" +
                            "\107\u03be\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\221\071\222" +
                            "\021\226\174\231\115\232\127\233\066\234\112\236\135" +
                            "\240\133\001\002\000\002\001\uffba\000\012\011\227\111" +
                            "\260\114\263\116\064\001\002\000\004\013\u03c1\001\002" +
                            "\000\004\227\u03c2\001\002\000\004\106\u03c3\001\002\000" +
                            "\002\001\uffe8\000\254\003\134\004\166\005\200\006\123" +
                            "\007\011\010\072\011\037\012\061\013\070\015\107\020" +
                            "\146\021\024\022\142\023\137\024\050\026\036\030\116" +
                            "\032\201\035\120\037\150\043\063\044\140\045\102\046" +
                            "\124\050\157\051\013\052\044\054\176\056\273\057\012" +
                            "\061\111\062\171\063\034\064\274\065\035\066\164\073" +
                            "\173\074\015\075\023\076\051\077\054\100\153\101\006" +
                            "\102\040\106\074\107\u03c5\111\246\112\147\113\045\114" +
                            "\076\115\026\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\147\010\167\121\170\100\175\167\176" +
                            "\016\200\060\201\175\202\032\203\151\204\043\205\145" +
                            "\206\105\207\154\210\101\211\041\212\057\214\110\220" +
                            "\046\221\071\222\021\226\174\231\115\232\127\233\066" +
                            "\234\112\236\135\240\133\001\002\000\002\001\uffbd\000" +
                            "\002\001\ufee2\000\002\001\ufedc\000\016\013\070\016\u031e" +
                            "\017\u031f\103\u03ca\104\u0310\105\u030f\001\002\000\012\013" +
                            "\070\103\u0221\104\u0310\105\u030f\001\002\000\002\001\ufe60" +
                            "\000\002\001\uffe2\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\uff28\000" +
                            "\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\uff25\000\004\147\u03d2\001\002\000\004" +
                            "\124\u03d0\001\uff27\000\156\004\166\006\123\007\011\010" +
                            "\072\011\227\012\061\013\070\020\146\035\120\046\247" +
                            "\062\171\063\034\073\173\074\015\075\023\076\051\077" +
                            "\054\100\153\101\006\102\040\111\246\112\147\113\045" +
                            "\114\076\116\064\117\033\120\103\121\056\122\144\123" +
                            "\122\130\073\167\121\170\100\175\167\176\016\200\060" +
                            "\201\175\202\032\203\151\204\043\205\145\206\105\207" +
                            "\154\210\101\211\041\212\057\214\110\220\245\226\174" +
                            "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
                            "\070\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c" +
                            "\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157" +
                            "\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b" +
                            "\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174" +
                            "\u013b\177\u013f\001\uff26\000\156\004\166\006\123\007\011" +
                            "\010\072\011\227\012\061\013\070\020\146\035\120\046" +
                            "\247\062\171\063\034\073\173\074\015\075\023\076\051" +
                            "\077\054\100\153\101\006\102\040\111\246\112\147\113" +
                            "\045\114\076\116\064\117\033\120\103\121\056\122\144" +
                            "\123\122\130\073\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\001\uff28" +
                            "\000\004\147\u03d4\001\002\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\uff28\000\004\227\u03d6\001\002\000\240\003\134\004\166" +
                            "\005\200\006\123\007\011\010\072\011\037\012\061\013" +
                            "\070\015\107\020\146\021\024\022\142\023\137\024\050" +
                            "\026\036\030\116\032\201\035\120\037\150\043\063\044" +
                            "\140\045\102\046\247\050\157\051\013\052\044\054\176" +
                            "\056\273\057\012\061\111\062\171\063\034\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\226\174\230" +
                            "\u03d8\231\115\232\127\233\066\234\112\240\133\001\002" +
                            "\000\002\001\uffdc\000\002\001\uffe8\000\002\001\uff98\000" +
                            "\254\003\134\004\166\005\200\006\123\007\011\010\072" +
                            "\011\037\012\061\013\070\015\107\020\146\021\024\022" +
                            "\142\023\137\024\050\026\036\027\u03db\030\116\032\201" +
                            "\035\120\037\150\043\063\044\140\045\102\046\124\050" +
                            "\157\051\013\052\044\054\176\056\273\057\012\061\111" +
                            "\062\171\063\034\064\274\065\035\066\164\073\173\074" +
                            "\015\075\023\076\051\077\054\100\153\101\006\102\040" +
                            "\106\074\111\246\112\147\113\045\114\076\115\026\116" +
                            "\064\117\033\120\103\121\056\122\144\123\122\130\073" +
                            "\147\010\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\046\221\071\222" +
                            "\021\226\174\231\115\232\127\233\066\234\112\236\135" +
                            "\240\133\001\002\000\002\001\uff97\000\156\004\166\006" +
                            "\123\007\011\010\072\011\227\012\061\013\070\020\146" +
                            "\035\120\046\247\062\171\063\034\073\173\074\015\075" +
                            "\023\076\051\077\054\100\153\101\006\102\040\111\246" +
                            "\112\147\113\045\114\076\116\064\117\033\120\103\121" +
                            "\056\122\144\123\122\130\073\167\121\170\100\175\167" +
                            "\176\016\200\060\201\175\202\032\203\151\204\043\205" +
                            "\145\206\105\207\154\210\101\211\041\212\057\214\110" +
                            "\220\245\226\174\231\115\232\127\233\066\234\112\240" +
                            "\133\001\002\000\072\034\u014c\125\u0144\126\u0154\127\u013d" +
                            "\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155" +
                            "\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142" +
                            "\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172" +
                            "\u0141\173\u0149\174\u013b\177\u013f\227\u03de\001\002\000\002" +
                            "\001\ufe11\000\070\034\u014c\125\u0144\126\u0154\127\u013d\146" +
                            "\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155\u0152" +
                            "\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142\164" +
                            "\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172\u0141" +
                            "\173\u0149\174\u013b\177\u013f\001\ufe10\000\002\001\ufee4\000" +
                            "\006\036\u03f1\114\236\001\uffed\000\010\011\227\114\u03e4" +
                            "\116\064\001\002\000\002\001\uffee\000\006\011\227\116" +
                            "\064\001\002\000\010\011\227\114\u03e4\116\064\001\002" +
                            "\000\006\124\u03e7\147\u03e8\001\002\000\010\011\227\114" +
                            "\u03e4\116\064\001\002\000\002\001\ufff3\000\002\001\uffef" +
                            "\000\006\124\u03e7\147\u03eb\001\002\000\002\001\ufff1\000" +
                            "\006\036\u03ed\114\236\001\uffeb\000\004\011\u03ee\001\002" +
                            "\000\002\001\uffea\000\006\124\u03e7\147\u03f0\001\002\000" +
                            "\002\001\ufff2\000\004\011\u03f2\001\002\000\002\001\uffec" +
                            "\000\002\001\uffc3\000\006\124\u02a8\147\u03f5\001\002\000" +
                            "\002\001\uffc2\000\156\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\167\121\170\100\175\167\176\016\200\060\201" +
                            "\175\202\032\203\151\204\043\205\145\206\105\207\154" +
                            "\210\101\211\041\212\057\214\110\220\245\226\174\231" +
                            "\115\232\127\233\066\234\112\240\133\001\002\000\072" +
                            "\034\u014c\125\u0144\126\u0154\127\u013d\146\u0140\150\u013c\151" +
                            "\u014e\152\u013e\153\u0146\154\u014d\155\u0152\156\u0147\157\u013a" +
                            "\160\u0145\161\u0151\162\u0150\163\u0142\164\u014f\165\u014b\166" +
                            "\u0148\167\u0153\170\u0143\171\u014a\172\u0141\173\u0149\174\u013b" +
                            "\177\u013f\213\u03f8\001\002\000\002\001\ufeac\000\002\001" +
                            "\uffab\000\002\001\uffce\000\002\001\ufef5\000\160\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\154\u037d\167\121\170" +
                            "\100\175\167\176\016\200\060\201\175\202\032\203\151" +
                            "\204\043\205\145\206\105\207\154\210\101\211\041\212" +
                            "\057\214\110\220\245\226\174\231\115\232\127\233\066" +
                            "\234\112\240\133\001\ufe2a\000\004\227\u03fe\001\002\000" +
                            "\002\001\ufed5\000\004\072\u0402\001\ufe00\000\050\071\u0137" +
                            "\072\ufe03\131\u012c\132\u0130\133\u012d\134\u0138\135\u0131\136" +
                            "\u0136\137\u0133\140\u0135\141\u012f\142\u012b\143\u0132\144\u0134" +
                            "\145\u012e\147\ufe03\200\ufe51\201\ufe51\227\ufe03\001\ufe53\000" +
                            "\010\072\ufe02\147\ufe02\227\ufe02\001\ufe54\000\156\004\166" +
                            "\006\123\007\011\010\072\011\227\012\061\013\070\020" +
                            "\146\035\120\046\247\062\171\063\034\073\173\074\015" +
                            "\075\023\076\051\077\054\100\153\101\006\102\040\111" +
                            "\246\112\147\113\045\114\076\116\064\117\033\120\103" +
                            "\121\056\122\144\123\122\130\073\167\121\170\100\175" +
                            "\167\176\016\200\060\201\175\202\032\203\151\204\043" +
                            "\205\145\206\105\207\154\210\101\211\041\212\057\214" +
                            "\110\220\245\226\174\231\115\232\127\233\066\234\112" +
                            "\240\133\001\002\000\002\001\ufdff\000\006\124\u040d\147" +
                            "\u040e\001\002\000\002\001\uff61\000\026\011\227\013\070" +
                            "\074\015\106\u040a\111\u01c7\114\u01c3\116\064\212\057\220" +
                            "\226\231\115\001\002\000\002\001\uff62\000\002\001\uff60" +
                            "\000\004\071\u0137\001\ufe53\000\156\004\166\006\123\007" +
                            "\011\010\072\011\227\012\061\013\070\020\146\035\120" +
                            "\046\247\062\171\063\034\073\173\074\015\075\023\076" +
                            "\051\077\054\100\153\101\006\102\040\111\246\112\147" +
                            "\113\045\114\076\116\064\117\033\120\103\121\056\122" +
                            "\144\123\122\130\073\167\121\170\100\175\167\176\016" +
                            "\200\060\201\175\202\032\203\151\204\043\205\145\206" +
                            "\105\207\154\210\101\211\041\212\057\214\110\220\245" +
                            "\226\174\231\115\232\127\233\066\234\112\240\133\001" +
                            "\002\000\072\034\u014c\107\u040c\125\u0144\126\u0154\127\u013d" +
                            "\146\u0140\150\u013c\151\u014e\152\u013e\153\u0146\154\u014d\155" +
                            "\u0152\156\u0147\157\u013a\160\u0145\161\u0151\162\u0150\163\u0142" +
                            "\164\u014f\165\u014b\166\u0148\167\u0153\170\u0143\171\u014a\172" +
                            "\u0141\173\u0149\174\u013b\177\u013f\001\002\000\002\001\uff5f" +
                            "\000\006\013\u0405\231\u0406\001\002\000\002\001\uffd2\000" +
                            "\002\001\uff63\000\162\004\166\006\123\007\011\010\072" +
                            "\011\227\012\061\013\070\020\146\035\120\046\247\062" +
                            "\171\063\034\073\173\074\015\075\023\076\051\077\054" +
                            "\100\153\101\006\102\040\111\246\112\147\113\045\114" +
                            "\076\116\064\117\033\120\103\121\056\122\144\123\122" +
                            "\130\073\154\u0123\167\121\170\100\175\167\176\016\200" +
                            "\060\201\175\202\032\203\151\204\043\205\145\206\105" +
                            "\207\154\210\101\211\041\212\057\214\110\220\245\226" +
                            "\174\231\115\232\127\233\066\234\112\240\133\241\u0128" +
                            "\001\uff6e\000\004\227\u0412\001\002\000\002\001\ufec4\000" +
                            "\002\001\000"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0411\000\006\002\003\006\004\001\001\000\002\001" +
                            "\001\000\120\003\164\007\176\010\167\013\125\055\160" +
                            "\056\046\061\124\064\016\070\017\071\061\072\161\073" +
                            "\135\100\103\111\074\113\130\116\066\121\131\126\116" +
                            "\127\142\130\027\134\151\135\026\136\052\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\205\155\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\044\u0403\045" +
                            "\u0406\001\001\000\074\003\164\055\u0400\056\046\061\124" +
                            "\064\016\070\u0123\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\u03ff\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\204\u03fe\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\072\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u03fa\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
                            "\164\052\u03f3\055\160\056\046\061\124\064\016\070\u02a5" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\076" +
                            "\003\164\013\u03f2\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\205\155" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\002\001\001\000\012\003\u03e0\004\u03e2\005\u03e5" +
                            "\016\303\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u03df\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u03de" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\105" +
                            "\u03c7\107\u030d\151\u030b\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u03c6\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u03c5\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\046\u03a8" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\076\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u037d\071\061\072\161" +
                            "\073\135\100\103\103\u037f\104\u037e\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\042\003\u01c7\056\046" +
                            "\071\061\072\u01c1\073\135\100\103\116\u01c3\130\u024b\145" +
                            "\u037b\146\006\147\024\151\127\155\041\160\054\206\u016f" +
                            "\207\051\001\001\000\002\001\001\000\002\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u0379" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\002" +
                            "\001\001\000\012\105\u0372\106\u0371\107\u030d\151\u030b\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u0369\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\004\011\u0367\001\001\000\002\001\001\000\004\003\u0366" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u0365\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u0364\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\072\003\164\055\160\056\046\061\124\064\016\070" +
                            "\u0361\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\206\076" +
                            "\207\051\212\021\214\140\001\001\000\010\071\u0360\073" +
                            "\135\151\127\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u035f\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\032\003\u0166\071" +
                            "\u015f\072\u015d\073\135\100\u0163\116\u0160\147\024\151\127" +
                            "\152\u035d\154\u015c\155\u0162\156\u0164\001\001\000\002\001" +
                            "\001\000\010\105\u0353\107\u030d\151\u030b\001\001\000\004" +
                            "\003\u034c\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u0331\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u0330\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u032f\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\004\051\u0327" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\105" +
                            "\u030c\107\u030d\151\u030b\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\100\003\164" +
                            "\010\u02b0\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\205\155" +
                            "\206\076\207\051\212\021\214\140\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u02ae\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\074\003\164" +
                            "\052\u02a6\055\160\056\046\061\124\064\016\070\u02a5\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\002\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u02a4\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u02a3\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u0286" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\002" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u0285\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\002\001\001\000\072\003\164\055\u027e\056\046" +
                            "\061\124\064\016\070\u0123\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\u027d\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\057\u0273\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u0271\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\074\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u024d\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\u024c" +
                            "\205\u024e\206\076\207\051\212\021\214\140\001\001\000" +
                            "\042\003\u01c7\056\046\071\061\072\u01c1\073\135\100\103" +
                            "\116\u01c3\130\u024b\145\u024a\146\006\147\024\151\127\155" +
                            "\041\160\054\206\u016f\207\051\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u0248\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\024\202\112\204\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\024\003\234\061\213\062\212\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\024\003" +
                            "\234\061\213\062\u0221\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\002\001\001\000\024\003" +
                            "\234\061\213\062\u021d\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\002\001\001\000\002\001" +
                            "\001\000\024\003\234\061\213\062\u021c\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\002\001" +
                            "\001\000\004\003\u021b\001\001\000\002\001\001\000\002" +
                            "\001\001\000\030\003\234\061\213\062\u020b\063\224\065" +
                            "\u020c\067\u020a\116\223\157\215\210\232\211\220\213\222" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\024\003\234\061\213\062\u0200\063\224\116\223\157" +
                            "\215\210\232\211\220\213\222\001\001\000\024\003\234" +
                            "\061\213\062\u01fe\063\224\116\223\157\215\210\232\211" +
                            "\220\213\222\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\003\240\001\001\000\002\001\001\000\074\003\164" +
                            "\055\160\056\046\061\124\064\016\070\242\071\061\072" +
                            "\161\073\135\074\243\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\051\250" +
                            "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
                            "\253\035\263\040\255\041\261\117\260\142\254\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\003\323\001\001\000" +
                            "\002\001\001\000\004\036\266\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\011\270\001\001\000\116\003" +
                            "\164\010\277\012\271\013\125\055\160\056\046\061\124" +
                            "\064\016\070\017\071\061\072\161\073\135\100\103\111" +
                            "\074\113\130\116\066\126\274\127\276\130\027\134\151" +
                            "\135\026\136\052\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\205\155\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\004\016\303\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\037\313\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\003\325\001\001" +
                            "\000\002\001\001\000\012\003\253\041\327\117\260\142" +
                            "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\024\003\234\061\213\062" +
                            "\334\063\224\116\223\157\215\210\232\211\220\213\222" +
                            "\001\001\000\002\001\001\000\024\003\234\061\213\062" +
                            "\u0117\063\224\116\223\157\215\210\232\211\220\213\222" +
                            "\001\001\000\024\003\234\061\213\062\u0116\063\224\116" +
                            "\223\157\215\210\232\211\220\213\222\001\001\000\024" +
                            "\003\234\061\213\062\u0115\063\224\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\024\003\234\061\213" +
                            "\062\u0114\063\224\116\223\157\215\210\232\211\220\213" +
                            "\222\001\001\000\024\003\234\061\213\062\u0113\063\224" +
                            "\116\223\157\215\210\232\211\220\213\222\001\001\000" +
                            "\024\003\234\061\213\062\u0112\063\224\116\223\157\215" +
                            "\210\232\211\220\213\222\001\001\000\024\003\234\061" +
                            "\213\062\u010d\063\224\116\223\157\215\210\232\211\220" +
                            "\213\222\001\001\000\024\003\234\061\213\062\u010c\063" +
                            "\224\116\223\157\215\210\232\211\220\213\222\001\001" +
                            "\000\024\003\234\061\213\062\u010b\063\224\116\223\157" +
                            "\215\210\232\211\220\213\222\001\001\000\024\003\234" +
                            "\061\213\062\u010a\063\224\116\223\157\215\210\232\211" +
                            "\220\213\222\001\001\000\024\003\234\061\213\062\u0109" +
                            "\063\224\116\223\157\215\210\232\211\220\213\222\001" +
                            "\001\000\024\003\234\061\213\062\u0108\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\024\003" +
                            "\234\061\213\062\u0107\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\024\003\234\061\213\062" +
                            "\u0106\063\224\116\223\157\215\210\232\211\220\213\222" +
                            "\001\001\000\024\003\234\061\213\062\u0105\063\224\116" +
                            "\223\157\215\210\232\211\220\213\222\001\001\000\024" +
                            "\003\234\061\213\062\u0104\063\224\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\022\003\234\061\213" +
                            "\063\u0102\116\223\157\215\210\232\211\220\213\222\001" +
                            "\001\000\024\003\234\061\213\062\u0101\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\024\003" +
                            "\234\061\213\062\u0100\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\024\003\234\061\213\062" +
                            "\377\063\224\116\223\157\215\210\232\211\220\213\222" +
                            "\001\001\000\024\003\234\061\213\062\376\063\224\116" +
                            "\223\157\215\210\232\211\220\213\222\001\001\000\024" +
                            "\003\234\061\213\062\375\063\224\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\024\003\234\061\213" +
                            "\062\374\063\224\116\223\157\215\210\232\211\220\213" +
                            "\222\001\001\000\024\003\234\061\213\062\373\063\224" +
                            "\116\223\157\215\210\232\211\220\213\222\001\001\000" +
                            "\024\003\234\061\213\062\372\063\224\116\223\157\215" +
                            "\210\232\211\220\213\222\001\001\000\024\003\234\061" +
                            "\213\062\371\063\224\116\223\157\215\210\232\211\220" +
                            "\213\222\001\001\000\024\003\234\061\213\062\370\063" +
                            "\224\116\223\157\215\210\232\211\220\213\222\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
                            "\234\061\213\062\u010f\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\002\001\001\000\024\003" +
                            "\234\061\213\062\u0111\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\024\003\234\061\213" +
                            "\062\u011c\063\224\116\223\157\215\210\232\211\220\213" +
                            "\222\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\003\u011f\001\001\000\002\001\001\000\076\003\164\042" +
                            "\u0121\043\u0125\055\u0126\056\046\061\124\064\016\070\u0123" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\u0124\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\042" +
                            "\003\u01c7\056\046\071\061\072\u01c1\073\135\100\103\115" +
                            "\u01f2\116\u01c3\130\u01f1\146\006\147\024\151\127\155\041" +
                            "\160\054\206\u016f\207\051\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
                            "\003\164\055\u0129\056\046\061\124\064\016\070\u0123\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\u0128" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\002\001\001\000\002\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u01e8\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u01c0\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u01be\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u01bd" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u01bc\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u01bb\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u01ba\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u01b9\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\072\003\164\055\160\056\046\061\124\064\016\070" +
                            "\u01b8\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\206\076" +
                            "\207\051\212\021\214\140\001\001\000\072\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u01b7\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u01b6\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u01b5\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\026\071\u0171\073\135\075" +
                            "\u01a9\077\u016b\100\u016e\112\u016a\146\u01a8\151\127\206\u016f" +
                            "\207\u0170\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u0138\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u01a7\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u01a6\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u01a5\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u01a4\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u01a3\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u01a2\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u019d" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u019c\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u019b\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u019a\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u0199\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\072\003\164\055\160\056\046\061\124\064\016\070" +
                            "\u0198\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\206\076" +
                            "\207\051\212\021\214\140\001\001\000\072\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u0197\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u0196\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u0195\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u0194\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u0193\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u0192\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\032\003\u0166\071\u015f\072\u015d\073" +
                            "\135\100\u0163\116\u0160\147\024\151\127\152\u0161\154\u015c" +
                            "\155\u0162\156\u0164\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u015b\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u015a\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u0159\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u0158\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u0157" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u0156\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u0155\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u0154\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\003\u018f\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\010\071\u018c\073\135\151\127\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\003\u0168\001\001\000\002\001\001\000\026\071\u0171\073" +
                            "\135\075\u016d\077\u016b\100\u016e\112\u016a\146\u016c\151\127" +
                            "\206\u016f\207\u0170\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\010\071\u0181" +
                            "\073\135\151\127\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u0173\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\072\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u0179\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\074\003\164\055\160\056\046\061\124" +
                            "\064\016\070\242\071\061\072\161\073\135\074\u0177\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\074\003\164\055\160\056\046\061\124" +
                            "\064\016\070\242\071\061\072\161\073\135\074\u017c\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\074\003\164\055" +
                            "\160\056\046\061\124\064\016\070\242\071\061\072\161" +
                            "\073\135\074\u017f\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\072\003\164\055" +
                            "\160\056\046\061\124\064\016\070\u0184\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u018a\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\074\003\164\055\160\056" +
                            "\046\061\124\064\016\070\242\071\061\072\161\073\135" +
                            "\074\u0188\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\020\071" +
                            "\u0171\073\135\100\u016e\146\u018e\151\127\206\u016f\207\u0170" +
                            "\001\001\000\002\001\001\000\002\001\001\000\020\071" +
                            "\u0171\073\135\100\u016e\146\u0191\151\127\206\u016f\207\u0170" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u019f\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u01a1\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\076\003\164\042\u01ab\043" +
                            "\u0125\055\u0126\056\046\061\124\064\016\070\u0123\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\u0124\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\004\076\u01ad" +
                            "\001\001\000\002\001\001\000\074\003\164\055\160\056" +
                            "\046\061\124\064\016\070\242\071\061\072\161\073\135" +
                            "\074\u01af\100\103\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\076" +
                            "\003\164\042\u01b2\043\u0125\055\u0126\056\046\061\124\064" +
                            "\016\070\u0123\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\u0124\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\004\076\u01b4\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\040\003\u01c7\056\046\071\061\072\u01c1\073\135\100\103" +
                            "\116\u01c3\130\u01c4\146\006\147\024\151\127\155\041\160" +
                            "\054\206\u016f\207\051\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\003\u01db\001\001\000\002\001\001\000" +
                            "\002\001\001\000\032\003\u0166\071\u015f\072\u015d\073\135" +
                            "\100\u0163\116\u0160\147\024\151\127\152\u01cd\154\u015c\155" +
                            "\u0162\156\u0164\001\001\000\002\001\001\000\002\001\001" +
                            "\000\076\003\164\042\u01c9\043\u0125\055\u0126\056\046\061" +
                            "\124\064\016\070\u0123\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\u0124\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\003\u01cc\001\001" +
                            "\000\002\001\001\000\004\060\u01ce\001\001\000\002\001" +
                            "\001\000\076\003\164\042\u01d0\043\u0125\055\u0126\056\046" +
                            "\061\124\064\016\070\u0123\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\u0124\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\024\071\u0171\073" +
                            "\135\077\u01d3\100\u016e\112\u016a\146\u01d4\151\127\206\u016f" +
                            "\207\u0170\001\001\000\002\001\001\000\002\001\001\000" +
                            "\076\003\164\042\u01d6\043\u0125\055\u0126\056\046\061\124" +
                            "\064\016\070\u0123\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\u0124\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\076\003\164\042\u01d9\043" +
                            "\u0125\055\u0126\056\046\061\124\064\016\070\u0123\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\u0124\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\076\003\164\042\u01dd\043\u0125\055" +
                            "\u0126\056\046\061\124\064\016\070\u0123\071\061\072\161" +
                            "\073\135\100\103\111\074\116\066\130\u0124\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\024" +
                            "\071\u0171\073\135\077\u01e0\100\u016e\112\u016a\146\u01e1\151" +
                            "\127\206\u016f\207\u0170\001\001\000\002\001\001\000\002" +
                            "\001\001\000\076\003\164\042\u01e3\043\u0125\055\u0126\056" +
                            "\046\061\124\064\016\070\u0123\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\u0124\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\002\001\001\000\076\003\164" +
                            "\042\u01e6\043\u0125\055\u0126\056\046\061\124\064\016\070" +
                            "\u0123\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\u0124\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\206\076" +
                            "\207\051\212\021\214\140\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\072\003\164\055\u01ec" +
                            "\056\046\061\124\064\016\070\u0123\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\u01eb\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\042\003\u01c7\056\046\071\061\072\u01c1\073" +
                            "\135\100\103\115\u01f0\116\u01c3\130\u01f1\146\006\147\024" +
                            "\151\127\155\041\160\054\206\u016f\207\051\001\001\000" +
                            "\002\001\001\000\002\001\001\000\072\003\164\055\u01ef" +
                            "\056\046\061\124\064\016\070\u0123\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\u01ee\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\051\u01f5\001\001\000\002\001\001\000\016\003" +
                            "\253\035\u01f7\040\255\041\261\117\260\142\254\001\001" +
                            "\000\002\001\001\000\004\036\u01f9\001\001\000\002\001" +
                            "\001\000\004\011\u01fb\001\001\000\116\003\164\010\277" +
                            "\012\271\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\113\130" +
                            "\116\066\126\274\127\276\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\022\003\234\061\213\063\u0202\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\022\003\234\061\213\063\u0208\116" +
                            "\223\157\215\210\232\211\220\213\222\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\066\u0211\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
                            "\003\234\061\213\062\u020f\063\224\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\002\001\001\000\024" +
                            "\003\234\061\213\062\u0212\063\224\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\002\001\001\000\002" +
                            "\001\001\000\024\003\234\061\213\062\u0214\063\224\116" +
                            "\223\157\215\210\232\211\220\213\222\001\001\000\002" +
                            "\001\001\000\074\003\164\055\160\056\046\061\124\064" +
                            "\016\070\242\071\061\072\161\073\135\074\u0216\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\002\001\001\000\030\003\234\061\213" +
                            "\062\u020b\063\224\065\u0219\067\u020a\116\223\157\215\210" +
                            "\232\211\220\213\222\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\102\003\164\010\u0229\013\125\023" +
                            "\u0227\055\160\056\046\061\124\064\016\070\017\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\205\155\206\076\207" +
                            "\051\212\021\214\140\001\001\000\004\112\u0224\001\001" +
                            "\000\002\001\001\000\024\003\234\061\213\062\u0226\063" +
                            "\224\116\223\157\215\210\232\211\220\213\222\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\011\u022a\001" +
                            "\001\000\002\001\001\000\116\003\164\010\277\012\271" +
                            "\013\125\055\160\056\046\061\124\064\016\070\017\071" +
                            "\061\072\161\073\135\100\103\111\074\113\130\116\066" +
                            "\126\274\127\276\130\027\134\151\135\026\136\052\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\205\155\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u022d\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\002\001\001\000\100\003" +
                            "\164\010\u0230\013\125\055\160\056\046\061\124\064\016" +
                            "\070\017\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\205" +
                            "\155\206\076\207\051\212\021\214\140\001\001\000\004" +
                            "\011\u023a\001\001\000\004\031\u0231\001\001\000\004\033" +
                            "\u0232\001\001\000\002\001\001\000\100\003\164\010\u0239" +
                            "\013\125\055\160\056\046\061\124\064\016\070\017\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\205\155\206\076" +
                            "\207\051\212\021\214\140\001\001\000\002\001\001\000" +
                            "\072\003\164\055\160\056\046\061\124\064\016\070\u0236" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\027\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\100" +
                            "\003\164\010\u0238\013\125\055\160\056\046\061\124\064" +
                            "\016\070\017\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\205\155\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\002\001\001\000\120\003\164\010\277" +
                            "\012\271\013\125\032\u023b\055\160\056\046\061\124\064" +
                            "\016\070\017\071\061\072\161\073\135\100\103\111\074" +
                            "\113\130\116\066\126\274\127\276\130\027\134\151\135" +
                            "\026\136\052\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\205" +
                            "\155\206\076\207\051\212\021\214\140\001\001\000\004" +
                            "\034\u023c\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u0240\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\011\u0243\001\001\000" +
                            "\116\003\164\010\277\012\271\013\125\055\160\056\046" +
                            "\061\124\064\016\070\017\071\061\072\161\073\135\100" +
                            "\103\111\074\113\130\116\066\126\274\127\276\130\027" +
                            "\134\151\135\026\136\052\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\205\155\206\076\207\051\212\021\214\140\001" +
                            "\001\000\004\011\u0245\001\001\000\116\003\164\010\277" +
                            "\012\271\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\113\130" +
                            "\116\066\126\274\127\276\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\046\003\u01c7\056\046\071\061" +
                            "\072\u01c1\073\135\100\103\101\u0254\102\u0255\116\u01c3\130" +
                            "\u0256\146\006\147\024\151\127\155\041\160\054\201\u0253" +
                            "\206\u016f\207\051\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\046\003\u01c7\056\046\071\061\072\u01c1\073\135\100" +
                            "\103\101\u0259\102\u0255\116\u01c3\130\u0256\146\006\147\024" +
                            "\151\127\155\041\160\054\201\u0253\206\u016f\207\051\001" +
                            "\001\000\002\001\001\000\002\001\001\000\044\003\u01c7" +
                            "\056\046\071\061\072\u01c1\073\135\100\103\102\u025c\116" +
                            "\u01c3\130\u0256\146\006\147\024\151\127\155\041\160\054" +
                            "\201\u0253\206\u016f\207\051\001\001\000\002\001\001\000" +
                            "\002\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u025f\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\026\071\u0171\073\135\075\u0262\077\u016b\100" +
                            "\u016e\112\u016a\146\u0261\151\127\206\u016f\207\u0170\001\001" +
                            "\000\002\001\001\000\002\001\001\000\076\003\164\042" +
                            "\u0264\043\u0125\055\u0126\056\046\061\124\064\016\070\u0123" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\u0124\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\004" +
                            "\076\u0266\001\001\000\002\001\001\000\076\003\164\042" +
                            "\u0268\043\u0125\055\u0126\056\046\061\124\064\016\070\u0123" +
                            "\071\061\072\161\073\135\100\103\111\074\116\066\130" +
                            "\u0124\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\004" +
                            "\076\u026a\001\001\000\002\001\001\000\042\003\u01c7\056" +
                            "\046\071\061\072\u01c1\073\135\100\103\116\u01c3\130\u026c" +
                            "\146\006\147\024\150\u026d\151\127\155\041\160\054\206" +
                            "\u016f\207\051\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\040\003\u01c7\056\046\071\061\072" +
                            "\u01c1\073\135\100\103\116\u01c3\130\u0270\146\006\147\024" +
                            "\151\127\155\041\160\054\206\u016f\207\051\001\001\000" +
                            "\002\001\001\000\002\001\001\000\072\003\164\055\160" +
                            "\056\046\061\124\064\016\070\u0274\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\024\071\u0171\073\135\077\u01e0" +
                            "\100\u016e\112\u016a\146\u01e1\151\127\206\u016f\207\u0170\001" +
                            "\001\000\002\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u027a\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
                            "\234\061\213\062\u0284\063\224\116\223\157\215\210\232" +
                            "\211\220\213\222\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u0288\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\004\025\u028a\001\001\000\002\001" +
                            "\001\000\004\026\u029b\001\001\000\004\026\u028d\001\001" +
                            "\000\002\001\001\000\004\026\u028f\001\001\000\002\001" +
                            "\001\000\002\001\001\000\072\003\164\055\160\056\046" +
                            "\061\124\064\016\070\u0297\071\061\072\161\073\135\100" +
                            "\103\111\074\116\066\130\027\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\206\076\207\051\212\021\214\140\001\001" +
                            "\000\004\027\u0293\001\001\000\004\011\u0296\001\001\000" +
                            "\002\001\001\000\002\001\001\000\116\003\164\010\277" +
                            "\012\271\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\113\130" +
                            "\116\066\126\274\127\276\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\004\027\u0298" +
                            "\001\001\000\004\011\u0299\001\001\000\116\003\164\010" +
                            "\277\012\271\013\125\055\160\056\046\061\124\064\016" +
                            "\070\017\071\061\072\161\073\135\100\103\111\074\113" +
                            "\130\116\066\126\274\127\276\130\027\134\151\135\026" +
                            "\136\052\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\205\155" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\026\u029d\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u02a1\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u02a9\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u02ab\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\072\003\164\055\160\056\046\061\124" +
                            "\064\016\070\u02b3\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\024\003\234" +
                            "\061\213\062\u02ba\063\224\116\223\157\215\210\232\211" +
                            "\220\213\222\001\001\000\002\001\001\000\004\114\u02bc" +
                            "\001\001\000\002\001\001\000\010\003\253\117\u02bf\141" +
                            "\u02be\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\003\253\117\u02c1\001\001\000\002\001\001\000\004\047" +
                            "\u02c3\001\001\000\020\050\u02c9\121\u02d3\122\u02c5\124\u02ca" +
                            "\125\u02cc\144\u02d2\161\u02c4\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\125\u02ff\001\001\000" +
                            "\002\001\001\000\002\001\001\000\076\003\164\013\u02fe" +
                            "\055\160\056\046\061\124\064\016\070\017\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\205\155\206\076\207\051" +
                            "\212\021\214\140\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\010\003\253\117\u02e0\162\u02df" +
                            "\001\001\000\004\120\u02d7\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\024\003\234\061\213\062\u02dc\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\002\001" +
                            "\001\000\024\003\234\061\213\062\u02de\063\224\116\223" +
                            "\157\215\210\232\211\220\213\222\001\001\000\002\001" +
                            "\001\000\004\163\u02e3\001\001\000\002\001\001\000\006" +
                            "\003\253\117\u02fd\001\001\000\024\003\253\117\u02ea\164" +
                            "\u02e8\165\u02e7\166\u02ec\167\u02eb\171\u02e5\172\u02e9\173\u02e6" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\020\003\253\117\u02ea\166\u02f7" +
                            "\167\u02eb\171\u02e5\172\u02e9\173\u02e6\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\010\003\253\117\u02f3" +
                            "\170\u02f2\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\003\253\117\u02f5\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\006\125" +
                            "\u02fb\174\u02fa\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\051\u0301\001\001\000\004\112\u0302" +
                            "\001\001\000\002\001\001\000\016\003\253\035\u0304\040" +
                            "\255\041\261\117\260\142\254\001\001\000\002\001\001" +
                            "\000\004\123\u0306\001\001\000\002\001\001\000\004\011" +
                            "\u0309\001\001\000\002\001\001\000\116\003\164\010\277" +
                            "\012\271\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\113\130" +
                            "\116\066\126\274\127\276\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\107\u031b\151\u030b\001\001\000" +
                            "\002\001\001\000\040\003\u01c7\056\046\071\061\072\u01c1" +
                            "\073\135\100\103\116\u01c3\130\u0319\146\006\147\024\151" +
                            "\127\155\041\160\054\206\u016f\207\051\001\001\000\072" +
                            "\003\164\055\160\056\046\061\124\064\016\070\u0312\071" +
                            "\061\072\161\073\135\100\103\111\074\116\066\130\027" +
                            "\143\162\145\113\146\006\147\024\151\127\153\105\155" +
                            "\041\157\157\160\054\175\171\176\013\206\076\207\051" +
                            "\212\021\214\140\001\001\000\006\107\u0311\151\u030b\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\072\003\164\055\160\056\046\061\124\064\016\070" +
                            "\u0315\071\061\072\161\073\135\100\103\111\074\116\066" +
                            "\130\027\143\162\145\113\146\006\147\024\151\127\153" +
                            "\105\155\041\157\157\160\054\175\171\176\013\206\076" +
                            "\207\051\212\021\214\140\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\010\110\u0323" +
                            "\112\u0324\151\u0322\001\001\000\004\112\u0321\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
                            "\u0328\001\001\000\002\001\001\000\016\003\253\035\u032a" +
                            "\040\255\041\261\117\260\142\254\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\011\u032d\001\001\000\116" +
                            "\003\164\010\277\012\271\013\125\055\160\056\046\061" +
                            "\124\064\016\070\017\071\061\072\161\073\135\100\103" +
                            "\111\074\113\130\116\066\126\274\127\276\130\027\134" +
                            "\151\135\026\136\052\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\205\155\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\074\003\164\055\u0334\056\046\061\124" +
                            "\064\016\070\u0123\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\u0333\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\202\u0335\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\050\003\u01c7\017\u033c\020\u0338\056\046\071\061\072\u01c1" +
                            "\073\135\100\103\116\u01c3\130\u033a\146\006\147\024\151" +
                            "\127\155\041\160\054\201\u0337\203\u0339\206\u016f\207\051" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\040\003\u01c7\056\046\071\061" +
                            "\072\u01c1\073\135\100\103\116\u01c3\130\u0345\146\006\147" +
                            "\024\151\127\155\041\160\054\206\u016f\207\051\001\001" +
                            "\000\046\003\u01c7\020\u033d\056\046\071\061\072\u01c1\073" +
                            "\135\100\103\116\u01c3\130\u033a\146\006\147\024\151\127" +
                            "\155\041\160\054\201\u0337\203\u033e\206\u016f\207\051\001" +
                            "\001\000\002\001\001\000\002\001\001\000\102\003\164" +
                            "\010\u0341\013\125\022\u0342\055\160\056\046\061\124\064" +
                            "\016\070\017\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\205\155\206\076\207\051\212\021\214\140\001\001\000" +
                            "\004\011\u0343\001\001\000\002\001\001\000\002\001\001" +
                            "\000\116\003\164\010\277\012\271\013\125\055\160\056" +
                            "\046\061\124\064\016\070\017\071\061\072\161\073\135" +
                            "\100\103\111\074\113\130\116\066\126\274\127\276\130" +
                            "\027\134\151\135\026\136\052\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\205\155\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\002\001\001\000\102\003" +
                            "\164\010\u0341\013\125\022\u0347\055\160\056\046\061\124" +
                            "\064\016\070\017\071\061\072\161\073\135\100\103\111" +
                            "\074\116\066\130\027\143\162\145\113\146\006\147\024" +
                            "\151\127\153\105\155\041\157\157\160\054\175\171\176" +
                            "\013\205\155\206\076\207\051\212\021\214\140\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\006\u0351\001\001\000\002\001\001" +
                            "\000\004\006\u034f\001\001\000\002\001\001\000\120\003" +
                            "\164\007\176\010\167\013\125\055\160\056\046\061\124" +
                            "\064\016\070\017\071\061\072\161\073\135\100\103\111" +
                            "\074\113\130\116\066\121\131\126\116\127\142\130\027" +
                            "\134\151\135\026\136\052\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\205\155\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\120\003\164\007\176\010\167" +
                            "\013\125\055\160\056\046\061\124\064\016\070\017\071" +
                            "\061\072\161\073\135\100\103\111\074\113\130\116\066" +
                            "\121\131\126\116\127\142\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\006\107\u031b\151\u030b\001\001\000\002\001\001\000" +
                            "\044\003\u01c7\014\u0358\015\u0356\056\046\071\061\072\u01c1" +
                            "\073\135\100\103\116\u01c3\130\u0357\146\006\147\024\151" +
                            "\127\155\041\160\054\206\u016f\207\051\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\042\003\u01c7\015\u035b\056\046\071\061\072\u01c1" +
                            "\073\135\100\103\116\u01c3\130\u0357\146\006\147\024\151" +
                            "\127\155\041\160\054\206\u016f\207\051\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\060\u035e\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\116\003\164" +
                            "\010\277\012\271\013\125\055\160\056\046\061\124\064" +
                            "\016\070\017\071\061\072\161\073\135\100\103\111\074" +
                            "\113\130\116\066\126\274\127\276\130\027\134\151\135" +
                            "\026\136\052\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\205" +
                            "\155\206\076\207\051\212\021\214\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u036f\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\024\071\u0171\073\135\077\u01d3" +
                            "\100\u016e\112\u016a\146\u01d4\151\127\206\u016f\207\u0170\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\107\u031b\151" +
                            "\u030b\001\001\000\006\107\u0311\151\u030b\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\042\003\u01c7\056\046\071\061\072" +
                            "\u01c1\073\135\100\103\115\u038e\116\u01c3\130\u01f1\146\006" +
                            "\147\024\151\127\155\041\160\054\206\u016f\207\051\001" +
                            "\001\000\002\001\001\000\004\066\u0382\001\001\000\002" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u0384\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\042\003\u01c7\056\046\071\061" +
                            "\072\u01c1\073\135\100\103\115\u0389\116\u01c3\130\u01f1\146" +
                            "\006\147\024\151\127\155\041\160\054\206\u016f\207\051" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u0387\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\042\003\u01c7\056\046\071\061\072\u01c1\073\135" +
                            "\100\103\115\u0388\116\u01c3\130\u01f1\146\006\147\024\151" +
                            "\127\155\041\160\054\206\u016f\207\051\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\072\003" +
                            "\164\055\160\056\046\061\124\064\016\070\u038c\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\042\003\u01c7\056\046\071\061" +
                            "\072\u01c1\073\135\100\103\115\u038d\116\u01c3\130\u01f1\146" +
                            "\006\147\024\151\127\155\041\160\054\206\u016f\207\051" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\072\003\164\055\160\056\046\061\124\064\016" +
                            "\070\u0390\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\137\u0394\001\001\000\006\003" +
                            "\253\117\u039b\001\001\000\004\140\u0395\001\001\000\002" +
                            "\001\001\000\010\003\253\117\u02bf\141\u0397\001\001\000" +
                            "\002\001\001\000\004\047\u0399\001\001\000\020\050\u02c9" +
                            "\121\u02d3\122\u02c5\124\u02ca\125\u02cc\144\u02d2\161\u02c4\001" +
                            "\001\000\002\001\001\000\002\001\001\000\072\003\164" +
                            "\055\160\056\046\061\124\064\016\070\u039d\071\061\072" +
                            "\161\073\135\100\103\111\074\116\066\130\027\143\162" +
                            "\145\113\146\006\147\024\151\127\153\105\155\041\157" +
                            "\157\160\054\175\171\176\013\206\076\207\051\212\021" +
                            "\214\140\001\001\000\002\001\001\000\102\003\164\010" +
                            "\u03a1\013\125\030\u03a0\055\160\056\046\061\124\064\016" +
                            "\070\017\071\061\072\161\073\135\100\103\111\074\116" +
                            "\066\130\027\143\162\145\113\146\006\147\024\151\127" +
                            "\153\105\155\041\157\157\160\054\175\171\176\013\205" +
                            "\155\206\076\207\051\212\021\214\140\001\001\000\004" +
                            "\011\u03a2\001\001\000\002\001\001\000\002\001\001\000" +
                            "\116\003\164\010\277\012\271\013\125\055\160\056\046" +
                            "\061\124\064\016\070\017\071\061\072\161\073\135\100" +
                            "\103\111\074\113\130\116\066\126\274\127\276\130\027" +
                            "\134\151\135\026\136\052\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\205\155\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\074\003\164\055\160\056\046" +
                            "\061\124\064\016\070\242\071\061\072\161\073\135\074" +
                            "\u03a5\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\024\003\234\061\213\062\u03ad\063" +
                            "\224\116\223\157\215\210\232\211\220\213\222\001\001" +
                            "\000\002\001\001\000\024\003\234\061\213\062\u03af\063" +
                            "\224\116\223\157\215\210\232\211\220\213\222\001\001" +
                            "\000\002\001\001\000\004\011\u03b1\001\001\000\116\003" +
                            "\164\010\277\012\271\013\125\055\160\056\046\061\124" +
                            "\064\016\070\017\071\061\072\161\073\135\100\103\111" +
                            "\074\113\130\116\066\126\274\127\276\130\027\134\151" +
                            "\135\026\136\052\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\205\155\206\076\207\051\212\021\214\140\001\001\000" +
                            "\010\131\u03b5\132\u03b6\133\u03b4\001\001\000\002\001\001" +
                            "\000\002\001\001\000\006\177\u03b9\200\u03b8\001\001\000" +
                            "\004\133\u03b7\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\011\u03bc\001" +
                            "\001\000\116\003\164\010\277\012\271\013\125\055\160" +
                            "\056\046\061\124\064\016\070\017\071\061\072\161\073" +
                            "\135\100\103\111\074\113\130\116\066\126\274\127\276" +
                            "\130\027\134\151\135\026\136\052\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\205\155\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\006\003\253\117\u03bf" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\004\011\u03c3\001\001\000\116\003\164\010\277" +
                            "\012\271\013\125\055\160\056\046\061\124\064\016\070" +
                            "\017\071\061\072\161\073\135\100\103\111\074\113\130" +
                            "\116\066\126\274\127\276\130\027\134\151\135\026\136" +
                            "\052\143\162\145\113\146\006\147\024\151\127\153\105" +
                            "\155\041\157\157\160\054\175\171\176\013\205\155\206" +
                            "\076\207\051\212\021\214\140\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\006\107\u031b\151" +
                            "\u030b\001\001\000\006\107\u0311\151\u030b\001\001\000\002" +
                            "\001\001\000\002\001\001\000\076\003\164\053\u03cd\054" +
                            "\u03ce\055\160\056\046\061\124\064\016\070\u03cc\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\072\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u03d0\071\061\072\161\073\135\100\103" +
                            "\111\074\116\066\130\027\143\162\145\113\146\006\147" +
                            "\024\151\127\153\105\155\041\157\157\160\054\175\171" +
                            "\176\013\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\076\003\164\053\u03d2\054\u03ce\055\160" +
                            "\056\046\061\124\064\016\070\u03cc\071\061\072\161\073" +
                            "\135\100\103\111\074\116\066\130\027\143\162\145\113" +
                            "\146\006\147\024\151\127\153\105\155\041\157\157\160" +
                            "\054\175\171\176\013\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\076\003\164\053\u03d4\054" +
                            "\u03ce\055\160\056\046\061\124\064\016\070\u03cc\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\027\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\102\003\164" +
                            "\010\u03d8\013\125\021\u03d6\055\160\056\046\061\124\064" +
                            "\016\070\017\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\205\155\206\076\207\051\212\021\214\140\001\001\000" +
                            "\002\001\001\000\004\011\u03d9\001\001\000\002\001\001" +
                            "\000\116\003\164\010\277\012\271\013\125\055\160\056" +
                            "\046\061\124\064\016\070\017\071\061\072\161\073\135" +
                            "\100\103\111\074\113\130\116\066\126\274\127\276\130" +
                            "\027\134\151\135\026\136\052\143\162\145\113\146\006" +
                            "\147\024\151\127\153\105\155\041\157\157\160\054\175" +
                            "\171\176\013\205\155\206\076\207\051\212\021\214\140" +
                            "\001\001\000\002\001\001\000\072\003\164\055\160\056" +
                            "\046\061\124\064\016\070\u03dc\071\061\072\161\073\135" +
                            "\100\103\111\074\116\066\130\027\143\162\145\113\146" +
                            "\006\147\024\151\127\153\105\155\041\157\157\160\054" +
                            "\175\171\176\013\206\076\207\051\212\021\214\140\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\010\003\u03e0\004" +
                            "\u03e2\005\u03ee\001\001\000\002\001\001\000\004\003\u03eb" +
                            "\001\001\000\010\003\u03e0\004\u03e2\005\u03e9\001\001\000" +
                            "\002\001\001\000\006\003\u03e0\004\u03e8\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u03f6\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\076\003\164\055\160\056\046\061" +
                            "\124\064\016\070\u037d\071\061\072\161\073\135\100\103" +
                            "\103\u03fc\104\u037e\111\074\116\066\130\027\143\162\145" +
                            "\113\146\006\147\024\151\127\153\105\155\041\157\157" +
                            "\160\054\175\171\176\013\206\076\207\051\212\021\214" +
                            "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
                            "\164\055\u0400\056\046\061\124\064\016\070\u0123\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\u03ff\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\204\u0402\206\076\207" +
                            "\051\212\021\214\140\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\042\003\u01c7\056\046\071" +
                            "\061\072\u01c1\073\135\100\103\116\u01c3\130\u0408\143\u0407" +
                            "\146\006\147\024\151\127\155\041\160\054\206\u016f\207" +
                            "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\072\003\164\055\160\056\046\061\124\064" +
                            "\016\070\u040a\071\061\072\161\073\135\100\103\111\074" +
                            "\116\066\130\027\143\162\145\113\146\006\147\024\151" +
                            "\127\153\105\155\041\157\157\160\054\175\171\176\013" +
                            "\206\076\207\051\212\021\214\140\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\045\u040e\001\001\000\002" +
                            "\001\001\000\002\001\001\000\076\003\164\042\u0410\043" +
                            "\u0125\055\u0126\056\046\061\124\064\016\070\u0123\071\061" +
                            "\072\161\073\135\100\103\111\074\116\066\130\u0124\143" +
                            "\162\145\113\146\006\147\024\151\127\153\105\155\041" +
                            "\157\157\160\054\175\171\176\013\206\076\207\051\212" +
                            "\021\214\140\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$PhpAstParser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$PhpAstParser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$PhpAstParser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    protected final static Integer PUBLIC = Integer.valueOf(Modifiers.AccPublic);
    protected final static Integer PRIVATE = Integer.valueOf(Modifiers.AccPrivate);
    protected final static Integer PROTECTED = Integer.valueOf(Modifiers.AccProtected);
    protected final static Integer ABSTRACT = Integer.valueOf(Modifiers.AccAbstract);
    protected final static Integer FINAL = Integer.valueOf(Modifiers.AccFinal);
    protected final static Integer STATIC = Integer.valueOf(Modifiers.AccStatic);

    AST ast;

    public final void setAST(AST ast) {
        this.ast = ast;
    }

    public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
        Dispatch dispatch = null;
        if (property instanceof Variable) {
            dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable) property);
        } else if (property instanceof FunctionInvocation) {
            dispatch =
                    new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast, dispatcher,
                            (FunctionInvocation) property);
        } else {
            throw new IllegalArgumentException();
        }
        return dispatch;
    }

    protected VariableBase createDispatch(VariableBase dispatcher, ObjectDimList dimList) {
        return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
    }

    protected VariableBase resolveDimList(VariableBase variable, DimList list) {
        if (list == null) {
            return variable;
        }
        for (DimList.Element el : list) {
            variable = new ArrayAccess(variable.getStart(), el.right, ast, variable, el.index, el.type);
        }
        return variable;
    }

    /**
     * XXX: Reimplement scalars as NamespaceName
     */
    protected VariableBase detectScalar(VariableBase expr) {
        if (expr instanceof NamespaceName) {
            NamespaceName name = (NamespaceName) expr;
            if (name.getSegments().size() == 1) {
                Identifier i = name.getSegments().get(0);
                if (!name.isGlobal() && !name.isCurrent()) {
                    return new Scalar(i.getStart(), i.getEnd(), ast, i.getName(), Scalar.TYPE_STRING);
                }
            }
        }
        return expr;
    }

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations
     * implemented in subclasses).  Here in the base class a very simple
     * implementation is provided which simply prints the message to
     * System.err.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
        super.report_error(message, info);
    }

    protected void report_expected_token_ids() {
        // XXX : really verbose, disable it completely for now
        // if (DLTKCore.DEBUG) {
        //     super.report_expected_token_ids();
        // }
    }

    public void report_fatal_error(
            String message,
            Object info)
            throws java.lang.Exception {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        // throw new Exception("Can't recover from previous error(s)");
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$PhpAstParser$actions {
        private final PhpAstParser parser;

        /**
         * Constructor
         */
        CUP$PhpAstParser$actions(PhpAstParser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action_part00000000(
                int CUP$PhpAstParser$act_num,
                java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
                java.util.Stack CUP$PhpAstParser$stack,
                int CUP$PhpAstParser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$PhpAstParser$result;

            /* select the action based on the action number */
            switch (CUP$PhpAstParser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // thestart ::= top_statement_list
                {
                    Program RESULT = null;
                    int sListleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int sListright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List sList = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
                    List commentList = phpAstLexer.getCommentList();
                    program = new Program(sListleft, sListright, parser.ast, sList, commentList);
                    RESULT = program;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("thestart", 0,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= thestart EOF
                {
                    Object RESULT = null;
                    int start_valleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int start_valright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Program start_val =
                            (Program) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("$START", 0,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$PhpAstParser$parser.done_parsing();
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // namespace_name ::= T_STRING
                {
                    List RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new Identifier(nleft, nright, parser.ast, n));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("namespace_name", 1,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int nleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new Identifier(nleft, nright, parser.ast, n));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("namespace_name", 1,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // namespace_name ::= T_DEFINE
                {
                    List RESULT = null;
                    int nleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int nright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String n = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new Identifier(nleft, nright, parser.ast, n));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("namespace_name", 1,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // top_statement_list ::= top_statement_list top_statement
                {
                    List RESULT = null;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (statement != null) {
                        if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
                            Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
                            // EmptyStatement length >= 2 means it is "?>" (with eventually a newline),
                            // equals to 1 means it is ";"
                            if (!(statement instanceof EmptyStatement && statement.getLength() >= 2)
                                    && lastStatement instanceof NamespaceDeclaration
                                    && !((NamespaceDeclaration) lastStatement).isBracketed()) {
                                ((NamespaceDeclaration) lastStatement).addStatement(statement);
                            } else {
                                sList.add(statement);
                            }
                        } else {
                            sList.add(statement);
                        }
                    }
                    RESULT = sList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement_list", 4,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // top_statement_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement_list", 4,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // top_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // top_statement ::= function_declaration_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FunctionDeclaration statement =
                            (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // top_statement ::= class_declaration_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object statement = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    // Note: we never generate T_HALT_COMPILER
                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
                            new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
                            new NamespaceName(listleft, listright, parser.ast, list, false, false),
                            new Block(tokenleft, eright, parser.ast, sList), true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null,
                            new Block(tokenleft, eright, parser.ast, sList), true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatement(sleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // top_statement ::= T_USE T_FUNCTION use_declarations T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatement(sleft, eright, parser.ast, list, UseStatement.T_FUNCTION);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // top_statement ::= T_USE T_CONST use_declarations T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatement(sleft, eright, parser.ast, list, UseStatement.T_CONST);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // top_statement ::= constant_declaration T_SEMICOLON
                {
                    Statement RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("top_statement", 5,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // use_declarations ::= use_declarations T_COMMA use_declaration
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int useDeclleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int useDeclright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    UseStatementPart useDecl =
                            (UseStatementPart) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(useDecl);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declarations", 3,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // use_declarations ::= use_declaration
                {
                    List RESULT = null;
                    int useDeclleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int useDeclright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    UseStatementPart useDecl =
                            (UseStatementPart) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(useDecl);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declarations", 3,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // use_declaration ::= namespace_name
                {
                    UseStatementPart RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatementPart(listleft, listright, parser.ast,
                            new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declaration", 2,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // use_declaration ::= namespace_name T_AS T_STRING
                {
                    UseStatementPart RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int aliasNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int aliasNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String aliasName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
                            new NamespaceName(listleft, listright, parser.ast, list, false, false),
                            new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declaration", 2,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // use_declaration ::= T_NS_SEPARATOR namespace_name
                {
                    UseStatementPart RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatementPart(sleft, listright, parser.ast,
                            new NamespaceName(sleft, listright, parser.ast, list, true, false), null);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declaration", 2,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING
                {
                    UseStatementPart RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int aliasNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int aliasNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String aliasName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UseStatementPart(sleft, aliasNameright, parser.ast,
                            new NamespaceName(sleft, listright, parser.ast, list, true, false),
                            new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_declaration", 2,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // inner_statement_list ::= inner_statement_list inner_statement
                {
                    List RESULT = null;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    // Ignore null statements
                    if (statement != null) {
                        sList.add(statement);
                    }
                    RESULT = sList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement_list", 7,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // inner_statement_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement_list", 7,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // inner_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement", 8,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // inner_statement ::= function_declaration_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FunctionDeclaration statement =
                            (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement", 8,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // inner_statement ::= class_declaration_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement", 8,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON
                {
                    Statement RESULT = null;
                    int haltleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int haltright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object halt =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int closeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int closeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object close =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    // Note: we never generate K_HALT_COMPILER
                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("inner_statement", 8,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // statement ::= unticked_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("statement", 6,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // statement ::= T_STRING T_NEKUDOTAIM
                {
                    Statement RESULT = null;
                    int labelleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int labelright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String label =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new GotoLabel(labelleft, eright, parser.ast,
                                    new Identifier(labelleft, labelright, parser.ast,
                                            label));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("statement", 6,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Block(tokenleft, eright, parser.ast, sList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int iftrueleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int iftrueright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Statement iftrue =
                            (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int elseifleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int elseifright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List[] elseif =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int iffalseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int iffalseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement iffalse = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Expression innerCondition = null;
                    Statement trueStatement = null;
                    Statement falseStatement = iffalse;

                    for (int i = 0; i < elseif[0].size(); i++) {
                        innerCondition = (Expression) elseif[0].get(i);
                        trueStatement = (Statement) elseif[1].get(i);
                        int s = ((Integer) elseif[2].get(i)).intValue();
                        falseStatement =
                                new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement,
                                        falseStatement);
                    }
                    RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 9)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 9)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 9)).value;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int colonleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int colonright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object colon =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int ifTrueStatementListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int ifTrueStatementListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List ifTrueStatementList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int elseifleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int elseifright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List[] elseif =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int iffalseleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int iffalseright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Statement iffalse =
                            (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Expression innerCondition = null;
                    Statement trueStatement = null;
                    Statement falseStatement = iffalse;

                    for (int i = 0; i < elseif[0].size(); i++) {
                        innerCondition = (Expression) elseif[0].get(i);
                        trueStatement = (Statement) elseif[1].get(i);
                        int s = ((Integer) elseif[2].get(i)).intValue();
                        falseStatement =
                                new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement,
                                        falseStatement);
                    }
                    Block block =
                            new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
                    RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 9)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int statementleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int statementright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Statement statement =
                            (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 8)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).value;
                    int initializationsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int initializationsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    List initializations =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int condsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int condsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List conds =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int increasementsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int increasementsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List increasements =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ForStatement(tokenleft, statementright, parser.ast, initializations, conds,
                                    increasements,
                                    statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 8)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int caseBlockleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int caseBlockright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Block caseBlock = (Block) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // unticked_statement ::= T_BREAK T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new BreakStatement(tokenleft, eright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // unticked_statement ::= T_BREAK expr T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // unticked_statement ::= T_CONTINUE T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ContinueStatement(tokenleft, eright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // unticked_statement ::= T_RETURN T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReturnStatement(tokenleft, eright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // unticked_statement ::= T_RETURN variable T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    VariableBase expr =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // unticked_statement ::= yield_expr T_SEMICOLON
                {
                    Statement RESULT = null;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    YieldExpression expr =
                            (YieldExpression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticStatement(sleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List exprList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new EchoStatement(sleft, eright, parser.ast, exprList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // unticked_statement ::= T_INLINE_HTML
                {
                    Statement RESULT = null;
                    int htmlleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int htmlright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object html = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // unticked_statement ::= expr T_SEMICOLON
                {
                    Statement RESULT = null;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // unticked_statement ::= T_USE use_filename T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(expr);
                    RESULT = new ExpressionStatement(sleft, eright, parser.ast,
                            new FunctionInvocation(sleft, exprright, parser.ast,
                                    new FunctionName(sleft, sright, parser.ast,
                                            new Identifier(sleft, sright, parser.ast, "use")), list));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int closeParleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int closeParright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object closePar =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ExpressionStatement(sleft, eright, parser.ast,
                            new FunctionInvocation(sleft, closeParright, parser.ast,
                                    new FunctionName(sleft, sright, parser.ast,
                                            new Identifier(sleft, sright, parser.ast, "unset")), list));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression var =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression var =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ForEachStatement(tokenleft, statementright, parser.ast, expr, key, var, statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 7)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int listsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List[] lists =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // unticked_statement ::= T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int tokenright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object token = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause
                {
                    Statement RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int tryBlockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int tryBlockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object tryBlockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int tryListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int tryListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List tryList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int tryBlockEndleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tryBlockEndright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object tryBlockEnd =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int catchesListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int catchesListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List catchesList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int finallyClauseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int finallyClauseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FinallyClause finallyClause =
                            (FinallyClause) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    TryStatement s =
                            new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright,
                                    parser.ast, new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList),
                                    catchesList, finallyClause);

                    RESULT = s;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // unticked_statement ::= T_THROW expr T_SEMICOLON
                {
                    Statement RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int labelleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int labelright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String label =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new GotoStatement(sleft, eright, parser.ast,
                                    new Identifier(labelleft, labelright, parser.ast,
                                            label));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // unticked_statement ::= error
                {
                    Statement RESULT = null;
                    int theErrorleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int theErrorright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object theError = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
                    RESULT = error;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // unticked_statement ::= T_VAR_COMMENT unticked_statement
                {
                    Statement RESULT = null;
                    int varCommentleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varCommentright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String varComment =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List exprList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new EchoStatement(exprListleft, eright, parser.ast, exprList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_statement", 9,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // catches_list ::= non_empty_catches_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("catches_list", 87,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // catches_list ::=
                {
                    List RESULT = null;

                    List list = new LinkedList();
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("catches_list", 87,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // non_empty_catches_list ::= catch_clause
                {
                    List RESULT = null;
                    int catch_statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int catch_statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    CatchClause catch_statement =
                            (CatchClause) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(catch_statement);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_catches_list", 88,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // non_empty_catches_list ::= non_empty_catches_list catch_clause
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int catch_statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int catch_statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    CatchClause catch_statement =
                            (CatchClause) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(catch_statement);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_catches_list", 88,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    CatchClause RESULT = null;
                    int catch_wordleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int catch_wordright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Object catch_word =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int catchBlockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int catchBlockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object catchBlockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int catchListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int catchListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List catchList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int catchBlockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int catchBlockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object catchBlockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
                            new Variable(varleft, varright, parser.ast, var),
                            new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("catch_clause", 89,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 7)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // finally_clause ::= non_empty_finally_clause
                {
                    FinallyClause RESULT = null;
                    int clauseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int clauseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FinallyClause clause =
                            (FinallyClause) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = clause;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("finally_clause", 125,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // finally_clause ::=
                {
                    FinallyClause RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("finally_clause", 125,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    FinallyClause RESULT = null;
                    int finally_wordleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int finally_wordright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object finally_word =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int finallyBlockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int finallyBlockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object finallyBlockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int finallyListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int finallyListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List finallyList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int finallyBlockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int finallyBlockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object finallyBlockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block finallyBlock =
                            new Block(finallyBlockStartleft, finallyBlockEndright, parser.ast, finallyList);
                    FinallyClause finallyClause =
                            new FinallyClause(finally_wordleft, finallyBlockEndright, parser.ast, finallyBlock);
                    RESULT = finallyClause;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_finally_clause", 126,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // unset_variables ::= unset_variable
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unset_variables", 10,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 73: // unset_variables ::= unset_variables T_COMMA unset_variable
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unset_variables", 10,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 74: // unset_variable ::= variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unset_variable", 11,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 75: // use_filename ::= T_CONSTANT_ENCAPSED_STRING
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_filename", 12,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 76: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int scalarleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int scalarright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String scalar =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("use_filename", 12,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 77: // function_declaration_statement ::= unticked_function_declaration_statement
                {
                    FunctionDeclaration RESULT = null;
                    int functionDeclarationleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int functionDeclarationright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FunctionDeclaration functionDeclaration =
                            (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = functionDeclaration;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_declaration_statement", 84,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 78: // class_declaration_statement ::= unticked_class_declaration_statement
                {
                    Statement RESULT = null;
                    int classDeclarationleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classDeclarationright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement classDeclaration =
                            (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = classDeclaration;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_declaration_statement", 85,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 79: // is_reference ::=
                {
                    Boolean RESULT = null;

                    RESULT = Boolean.FALSE;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("is_reference", 39,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 80: // is_reference ::= T_REFERENCE
                {
                    Boolean RESULT = null;

                    RESULT = Boolean.TRUE;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("is_reference", 39,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 81: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    FunctionDeclaration RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 8)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).value;
                    int isReferenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int isReferenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Boolean isReference =
                            (Boolean) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int fnleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int fnright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    String fn =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int paramListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int paramListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List paramList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int blockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int blockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object blockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int blockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int blockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object blockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
                            new Identifier(fnleft, fnright, parser.ast, fn), paramList,
                            new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement", 90,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 8)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 82: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
                {
                    Statement RESULT = null;
                    int modifierleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int modifierright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    Integer modifier =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    String className =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int superClassleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int superClassright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression superClass =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int interfacesleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int interfacesright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List interfaces =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int blockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int blockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object blockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int blockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int blockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object blockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (modifier.intValue() == ClassDeclaration.MODIFIER_TRAIT) {
                        RESULT =
                                new TraitDeclaration(modifierleft, blockEndright, parser.ast,
                                        ClassDeclaration.MODIFIER_NONE,
                                        new Identifier(classNameleft, classNameright, parser.ast, className),
                                        superClass,
                                        interfaces,
                                        new Block(blockStartleft, blockEndright, parser.ast, sList));
                    } else {
                        RESULT =
                                new ClassDeclaration(modifierleft, blockEndright, parser.ast, modifier.intValue(),
                                        new Identifier(classNameleft, classNameright, parser.ast, className),
                                        superClass,
                                        interfaces,
                                        new Block(blockStartleft, blockEndright, parser.ast, sList));
                    }

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement", 91,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 83: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE
                {
                    Statement RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Integer s =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    String className =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int interfacesleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int interfacesright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List interfaces =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int blockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int blockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object blockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int sListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List sList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int blockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int blockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object blockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InterfaceDeclaration(sleft, blockEndright, parser.ast,
                            new Identifier(classNameleft, classNameright, parser.ast, className), interfaces,
                            new Block(blockStartleft, blockEndright, parser.ast, sList));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement", 91,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 84: // class_entry_type ::= T_CLASS
                {
                    Integer RESULT = null;

                    RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_NONE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_entry_type", 92,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 85: // class_entry_type ::= T_ABSTRACT T_CLASS
                {
                    Integer RESULT = null;

                    RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_ABSTRACT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_entry_type", 92,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 86: // class_entry_type ::= T_FINAL T_CLASS
                {
                    Integer RESULT = null;

                    RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_FINAL);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_entry_type", 92,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 87: // class_entry_type ::= T_TRAIT
                {
                    Integer RESULT = null;

                    RESULT = Integer.valueOf(ClassDeclaration.MODIFIER_TRAIT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_entry_type", 92,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 88: // extends_from ::=
                {
                    Expression RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("extends_from", 93,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 89: // extends_from ::= T_EXTENDS fully_qualified_class_name
                {
                    Expression RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = className;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("extends_from", 93,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 90: // interface_entry ::= T_INTERFACE
                {
                    Integer RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("interface_entry", 73,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 91: // interface_extends_list ::=
                {
                    List RESULT = null;

                    List list = new LinkedList();
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("interface_extends_list", 74,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 92: // interface_extends_list ::= T_EXTENDS interface_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("interface_extends_list", 74,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 93: // implements_list ::=
                {
                    List RESULT = null;

                    List list = new LinkedList();
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("implements_list", 94,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 94: // implements_list ::= T_IMPLEMENTS interface_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("implements_list", 94,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 95: // interface_list ::= fully_qualified_class_name
                {
                    List RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(className);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("interface_list", 95,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 96: // interface_list ::= interface_list T_COMMA fully_qualified_class_name
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(className);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("interface_list", 95,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 97: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE
                {
                    ListVariable RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List varList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ListVariable(sleft, eright, parser.ast, varList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("list_variable", 127,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 98: // foreach_expr ::= variable
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase expr = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_expr", 128,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 99: // foreach_expr ::= expr_without_variable
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_expr", 128,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 100: // foreach_key ::= foreach_variable T_DOUBLE_ARROW
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression var =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_key", 13,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 101: // foreach_value ::= foreach_variable
                {
                    Expression RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_value", 129,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 102: // foreach_value ::= list_variable
                {
                    Expression RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ListVariable var = (ListVariable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_value", 129,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 103: // foreach_variable ::= variable
                {
                    Expression RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_variable", 14,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 104: // foreach_variable ::= T_REFERENCE variable
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Reference(sleft, varright, parser.ast, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_variable", 14,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 105: // for_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("for_statement", 15,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 106: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR
                {
                    Statement RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int statementListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List statementList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(startleft, endright, parser.ast, statementList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("for_statement", 15,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 107: // foreach_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_statement", 16,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 108: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH
                {
                    Statement RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int statementListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List statementList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(startleft, endright, parser.ast, statementList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("foreach_statement", 16,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 109: // declare_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("declare_statement", 17,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 110: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE
                {
                    Statement RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int statementListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List statementList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(startleft, endright, parser.ast, statementList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("declare_statement", 17,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 111: // declare_list ::= string_st T_EQUAL static_operation
                {
                    List[] RESULT = null;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String key =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List listKeys = new LinkedList();
                    List listValues = new LinkedList();

                    listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
                    listValues.add(expr);

                    RESULT = new List[]{listKeys, listValues};

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("declare_list", 18,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 112: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_operation
                {
                    List[] RESULT = null;
                    int listsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List[] lists =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String key =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
                    lists[1].add(expr);
                    RESULT = lists;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("declare_list", 18,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 113: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE
                {
                    Block RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Block(sleft, eright, parser.ast, caseList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("switch_case_list", 19,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 114: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE
                {
                    Block RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Block(sleft, eright, parser.ast, caseList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("switch_case_list", 19,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 115: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH
                {
                    Block RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(startleft, endright, parser.ast, caseList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("switch_case_list", 19,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 116: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH
                {
                    Block RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(startleft, endright, parser.ast, caseList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("switch_case_list", 19,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 117: // case_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList(); // of SwitchCase

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("case_list", 20,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 118: // case_list ::= case_list T_CASE expr case_separator inner_statement_list
                {
                    List RESULT = null;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementsleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementsright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List statements = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    SwitchCase switchCase =
                            new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
                    if (caseList == null) {
                        caseList = new LinkedList(); // of switchCase
                    }
                    caseList.add(switchCase);
                    RESULT = caseList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("case_list", 20,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 119: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list
                {
                    List RESULT = null;
                    int caseListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int caseListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List caseList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementsleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementsright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List statements = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    SwitchCase switchCase =
                            new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
                    if (caseList == null) {
                        caseList = new LinkedList(); // of SwitchCase
                    }
                    caseList.add(switchCase);
                    RESULT = caseList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("case_list", 20,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 120: // case_separator ::= T_NEKUDOTAIM
                {
                    Object RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("case_separator", 21,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 121: // case_separator ::= T_SEMICOLON
                {
                    Object RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("case_separator", 21,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 122: // while_statement ::= statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("while_statement", 22,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 123: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE
                {
                    Statement RESULT = null;
                    int colonleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int colonright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object colon =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int statementListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int statementListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List statementList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(colonleft, endright, parser.ast, statementList, false);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("while_statement", 22,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 124: // elseif_list ::=
                {
                    List[] RESULT = null;

                    List listConditions = new LinkedList();
                    List listStatements = new LinkedList();
                    List listTokens = new LinkedList();
                    RESULT = new List[]{listConditions, listStatements, listTokens};

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("elseif_list", 23,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 125: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement
                {
                    List[] RESULT = null;
                    int elseifListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int elseifListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    List[] elseifList =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int iftrueleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int iftrueright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement iftrue = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    ((LinkedList) elseifList[0]).addFirst(cond);
                    ((LinkedList) elseifList[1]).addFirst(iftrue);
                    ((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
                    RESULT = elseifList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("elseif_list", 23,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 126: // new_elseif_list ::=
                {
                    List[] RESULT = null;

                    List listConditions = new LinkedList();
                    List listStatements = new LinkedList();
                    List listTokens = new LinkedList();
                    RESULT = new List[]{listConditions, listStatements, listTokens};

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("new_elseif_list", 24,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 127: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list
                {
                    List[] RESULT = null;
                    int elseifListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int elseifListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    List[] elseifList =
                            (List[]) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int colonleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int colonright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object colon =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int sListleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int sListright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List sList = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(colonleft, sListright, parser.ast, sList, false);
                    ((LinkedList) elseifList[0]).addFirst(cond);
                    ((LinkedList) elseifList[1]).addFirst(block);
                    ((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));
                    RESULT = elseifList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("new_elseif_list", 24,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 128: // else_single ::=
                {
                    Statement RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("else_single", 25,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 129: // else_single ::= T_ELSE statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("else_single", 25,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 130: // new_else_single ::=
                {
                    Statement RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("new_else_single", 26,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 131: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list
                {
                    Statement RESULT = null;
                    int colonleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int colonright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object colon =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Block(colonleft, listright, parser.ast, list, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("new_else_single", 26,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 132: // parameter_list ::= non_empty_parameter_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter_list", 27,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 133: // parameter_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter_list", 27,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 134: // non_empty_parameter_list ::= parameter
                {
                    List RESULT = null;
                    int parameterleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int parameterright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FormalParameter parameter =
                            (FormalParameter) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(parameter);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_parameter_list", 30,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 135: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int parameterleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int parameterright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FormalParameter parameter =
                            (FormalParameter) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(parameter);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_parameter_list", 30,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 136: // parameter ::= optional_class_type T_VARIABLE
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? varleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 137: // parameter ::= optional_class_type T_ELLIPSIS T_VARIABLE
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? varleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    RESULT = new FormalParameter(s, varright, parser.ast, classType, v, null, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 138: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ref =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? refleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    Reference ref_var = new Reference(refleft, varright, parser.ast, v);
                    RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 139: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object ref =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? refleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    Reference ref_var = new Reference(refleft, varright, parser.ast, v);
                    RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var, null, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 140: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_operation
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? varleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    RESULT = new FormalParameter(s, exprright, parser.ast, classType, v, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 141: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_operation
                {
                    FormalParameter RESULT = null;
                    int classTypeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int classTyperight =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression classType =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object ref =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int s = classType == null ? refleft : classTypeleft;
                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    Reference ref_var = new Reference(refleft, varright, parser.ast, v);
                    RESULT = new FormalParameter(s, exprright, parser.ast, classType, ref_var, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("parameter", 31,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 142: // optional_class_type ::=
                {
                    Expression RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("optional_class_type", 96,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 143: // optional_class_type ::= fully_qualified_class_name
                {
                    Expression RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = className;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("optional_class_type", 96,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 144: // optional_class_type ::= T_ARRAY
                {
                    Expression RESULT = null;
                    int arrayleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int arrayright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object array = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("optional_class_type", 96,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 145: // optional_class_type ::= T_CALLABLE
                {
                    Expression RESULT = null;
                    int callableleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int callableright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object callable = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Identifier(callableleft, callableright, parser.ast, "callable");

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("optional_class_type", 96,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 146: // function_call_parameter_list ::= non_empty_function_call_parameter_list
                {
                    List RESULT = null;
                    int paramsListleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int paramsListright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List paramsList = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call_parameter_list", 32,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 147: // function_call_parameter_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call_parameter_list", 32,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 148: // non_empty_function_call_parameter_list ::= expr_without_variable
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List paramsList = new LinkedList();
                    paramsList.add(var);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 149: // non_empty_function_call_parameter_list ::= variable
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List paramsList = new LinkedList();
                    paramsList.add(var);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 150: // non_empty_function_call_parameter_list ::= T_ELLIPSIS variable
                {
                    List RESULT = null;
                    int ellleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ellright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ell =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List paramsList = new LinkedList();
                    paramsList
                            .add(new PrefixExpression(ellleft, varright, parser.ast, var, PrefixExpression.OP_UNPACK));
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 151: // non_empty_function_call_parameter_list ::= T_ELLIPSIS expr_without_variable
                {
                    List RESULT = null;
                    int ellleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ellright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ell =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List paramsList = new LinkedList();
                    paramsList
                            .add(new PrefixExpression(ellleft, varright, parser.ast, var, PrefixExpression.OP_UNPACK));
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 152: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List paramsList = new LinkedList();
                    Expression var_ref = new Reference(sleft, varright, parser.ast, var);
                    paramsList.add(var_ref);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 153: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    paramsList.add(var);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 154: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    paramsList.add(var);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 155: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_ELLIPSIS variable
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int ellleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ellright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ell =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    paramsList
                            .add(new PrefixExpression(ellleft, varright, parser.ast, var, PrefixExpression.OP_UNPACK));
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 156: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_ELLIPSIS expr_without_variable
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int ellleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ellright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ell =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression var = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    paramsList
                            .add(new PrefixExpression(ellleft, varright, parser.ast, var, PrefixExpression.OP_UNPACK));
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 157: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Expression var_ref = new Reference(sleft, varright, parser.ast, var);
                    paramsList.add(var_ref);
                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list", 33,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 158: // global_var_list ::= global_var_list T_COMMA global_var
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("global_var_list", 34,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 159: // global_var_list ::= global_var
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("global_var_list", 34,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 160: // global_var ::= T_VARIABLE
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Variable(varleft, varright, parser.ast, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("global_var", 35,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 161: // global_var ::= T_DOLLAR r_variable
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("global_var", 35,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 162: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression varName =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("global_var", 35,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 163: // static_var_list ::= static_var_list T_COMMA T_VARIABLE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    list.add(v);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_var_list", 36,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 164: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_operation
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    Assignment assignment =
                            new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
                    list.add(assignment);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_var_list", 36,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 165: // static_var_list ::= T_VARIABLE
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    List list = new LinkedList();
                    list.add(v);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_var_list", 36,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 166: // static_var_list ::= T_VARIABLE T_EQUAL static_operation
                {
                    List RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    Assignment assignment =
                            new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr);
                    List list = new LinkedList();
                    list.add(assignment);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_var_list", 36,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 167: // class_statement_list ::= class_statement_list class_statement
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int classStatementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classStatementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement classStatement =
                            (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(classStatement);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement_list", 37,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 168: // class_statement_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement_list", 37,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 169: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON
                {
                    Statement RESULT = null;
                    int modifierleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int modifierright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Integer modifier =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int decListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int decListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List decList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement", 38,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 170: // class_statement ::= constant_declaration T_SEMICOLON
                {
                    Statement RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement", 38,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 171: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body
                {
                    Statement RESULT = null;
                    int modifierleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int modifierright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Integer modifier =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int isReferenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int isReferenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Boolean isReference =
                            (Boolean) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int fnleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int fnright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    String fn =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int paramListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int bodyleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int bodyright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Block body = (Block) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int methodStart = modifier == null ? sleft : modifierleft;
                    modifier = modifier == null ? PhpAstParser.PUBLIC : modifier;
                    Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
                    FunctionDeclaration functionDeclaration =
                            new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body,
                                    isReference.booleanValue());
                    RESULT =
                            new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(),
                                    functionDeclaration, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement", 38,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 7)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 172: // class_statement ::= T_VAR_COMMENT unticked_statement
                {
                    Statement RESULT = null;
                    int varCommentleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varCommentright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String varComment =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Statement statement = (Statement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement", 38,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 173: // class_statement ::= trait_use_statement
                {
                    Statement RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    TraitUseStatement statement =
                            (TraitUseStatement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = statement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_statement", 38,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 174: // trait_use_statement ::= T_USE trait_list trait_adaptations
                {
                    TraitUseStatement RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int adaptationsleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int adaptationsright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List adaptations = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    TraitUseStatement traitUseStatement =
                            new TraitUseStatement(startleft, adaptationsright, parser.ast, list, adaptations);
                    RESULT = traitUseStatement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_use_statement", 111,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 175: // trait_list ::= fully_qualified_class_name
                {
                    List RESULT = null;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName name =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List<NamespaceName> traitList = new LinkedList<NamespaceName>();
                    traitList.add(name);
                    RESULT = traitList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_list", 112,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 176: // trait_list ::= trait_list T_COMMA fully_qualified_class_name
                {
                    List RESULT = null;
                    int traitListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int traitListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List traitList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int nameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int nameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName name =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    traitList.add(name);
                    RESULT = traitList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_list", 112,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 177: // trait_adaptations ::= T_SEMICOLON
                {
                    List RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptations", 113,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 178: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptations", 113,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 179: // trait_adaptation_list ::=
                {
                    List RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptation_list", 114,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 180: // trait_adaptation_list ::= non_empty_trait_adaptation_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptation_list", 114,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 181: // non_empty_trait_adaptation_list ::= trait_adaptation_statement
                {
                    List RESULT = null;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    TraitStatement statement =
                            (TraitStatement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List<TraitStatement> taList = new LinkedList<TraitStatement>();
                    taList.add(statement);
                    RESULT = taList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list", 115,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 182: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement
                {
                    List RESULT = null;
                    int taListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int taListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List taList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int statementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int statementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    TraitStatement statement =
                            (TraitStatement) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    taList.add(statement);
                    RESULT = taList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list", 115,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 183: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON
                {
                    TraitStatement RESULT = null;
                    int precedenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int precedenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    TraitPrecedence precedence =
                            (TraitPrecedence) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    TraitPrecedenceStatement traitPrecedenceStatement =
                            new TraitPrecedenceStatement(precedenceleft, endright, parser.ast, precedence);
                    RESULT = traitPrecedenceStatement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptation_statement", 116,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 184: // trait_adaptation_statement ::= trait_alias T_SEMICOLON
                {
                    TraitStatement RESULT = null;
                    int aliasleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int aliasright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    TraitAlias alias =
                            (TraitAlias) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    TraitAliasStatement traitAliasStatement =
                            new TraitAliasStatement(aliasleft, endright, parser.ast, alias);
                    RESULT = traitAliasStatement;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_adaptation_statement", 116,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 185: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list
                {
                    TraitPrecedence RESULT = null;
                    int methodReferenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int methodReferenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    FullyQualifiedTraitMethodReference methodReference =
                            (FullyQualifiedTraitMethodReference) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int trListleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int trListright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List trList = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    TraitPrecedence traitPrecedence =
                            new TraitPrecedence(methodReferenceleft, trListright, parser.ast, methodReference, trList);
                    RESULT = traitPrecedence;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_precedence", 117,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 186: // trait_reference_list ::= fully_qualified_class_name
                {
                    List RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List<NamespaceName> trList = new LinkedList<NamespaceName>();
                    trList.add(className);
                    RESULT = trList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_reference_list", 118,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 187: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name
                {
                    List RESULT = null;
                    int trListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int trListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List trList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    trList.add(className);
                    RESULT = trList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_reference_list", 118,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 188: // trait_method_reference ::= T_STRING
                {
                    Expression RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    //FunctionName name = new FunctionName(sleft, sright, parser.ast,
                    //		new Identifier(sleft, sright, parser.ast, s));
                    //SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
                    RESULT = new Identifier(sleft, sright, parser.ast, s);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_method_reference", 119,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 189: // trait_method_reference ::= trait_method_reference_fully_qualified
                {
                    Expression RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    FullyQualifiedTraitMethodReference className =
                            (FullyQualifiedTraitMethodReference) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .peek()).value;

                    RESULT = className;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_method_reference", 119,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 190: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING
                {
                    FullyQualifiedTraitMethodReference RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    NamespaceName className =
                            (NamespaceName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int functionNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int functionNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String functionName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    //FunctionName name = new FunctionName(functionNameleft, functionNameright, parser.ast,
                    //		new Identifier(functionNameleft, functionNameright, parser.ast, s));
                    //SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
                    Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
                    FullyQualifiedTraitMethodReference methodReference =
                            new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, parser.ast,
                                    className,
                                    name);
                    RESULT = methodReference;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified", 120,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 191: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING
                {
                    TraitAlias RESULT = null;
                    int referenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int referenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression reference =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int modifierleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int modifierright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Integer modifier =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int functionNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int functionNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String functionName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
                    int modifierOffset = modifier == null ? functionNameleft : modifierleft;
                    //SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
                    Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
                    TraitAlias alias =
                            new TraitAlias(referenceleft, functionNameright, parser.ast, reference, modifierValue,
                                    modifierOffset, name);
                    RESULT = alias;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_alias", 121,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 192: // trait_alias ::= trait_method_reference T_AS member_modifier
                {
                    TraitAlias RESULT = null;
                    int referenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int referenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression reference =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int asleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int asright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object as =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int modifierleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int modifierright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Integer modifier = (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.intValue();
                    int modifierOffset = modifier == null ? asright + 1 : modifierleft;
                    TraitAlias alias =
                            new TraitAlias(referenceleft, modifierright, parser.ast, reference, modifierValue,
                                    modifierOffset, null);
                    RESULT = alias;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_alias", 121,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 193: // trait_modifiers ::=
                {
                    Integer RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_modifiers", 122,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 194: // trait_modifiers ::= member_modifier
                {
                    Integer RESULT = null;
                    int modifierleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int modifierright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Integer modifier = (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = modifier;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("trait_modifiers", 122,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 195: // method_body ::= T_SEMICOLON
                {
                    Block RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("method_body", 81,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 196: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    Block RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Block block = new Block(sleft, eright, parser.ast, list);
                    RESULT = block;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("method_body", 81,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 197: // variable_modifiers ::= non_empty_member_modifiers
                {
                    Integer RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int result = 0;
                    for (Iterator it = list.iterator(); it.hasNext(); ) {
                        Integer modifier = (Integer) it.next();
                        result |= modifier.intValue();
                    }
                    RESULT = Integer.valueOf(result);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_modifiers", 98,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 198: // variable_modifiers ::= T_VAR
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.PUBLIC;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_modifiers", 98,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 199: // method_modifiers ::=
                {
                    Integer RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("method_modifiers", 80,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 200: // method_modifiers ::= non_empty_member_modifiers
                {
                    Integer RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    int result = 0;
                    for (Iterator it = list.iterator(); it.hasNext(); ) {
                        Integer modifier = (Integer) it.next();
                        result |= modifier.intValue();
                    }
                    RESULT = Integer.valueOf(result);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("method_modifiers", 80,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 201: // non_empty_member_modifiers ::= member_modifier
                {
                    List RESULT = null;
                    int modifierleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int modifierright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Integer modifier = (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(modifier);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_member_modifiers", 82,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 202: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int modifierleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int modifierright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Integer modifier = (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(modifier);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_member_modifiers", 82,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 203: // member_modifier ::= T_PUBLIC
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.PUBLIC;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 204: // member_modifier ::= T_PROTECTED
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.PROTECTED;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 205: // member_modifier ::= T_PRIVATE
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.PRIVATE;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 206: // member_modifier ::= T_STATIC
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.STATIC;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 207: // member_modifier ::= T_ABSTRACT
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.ABSTRACT;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 208: // member_modifier ::= T_FINAL
                {
                    Integer RESULT = null;

                    RESULT = PhpAstParser.FINAL;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("member_modifier", 83,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 209: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable varId = new Variable(varleft, varright, parser.ast, var);
                    list.add(new ASTNode[]{varId, null});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_variable_declaration", 78,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 210: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_operation
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable varId = new Variable(varleft, varright, parser.ast, var);
                    list.add(new ASTNode[]{varId, expr});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_variable_declaration", 78,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 211: // class_variable_declaration ::= T_VARIABLE
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    Variable varId = new Variable(varleft, varright, parser.ast, var);
                    list.add(new ASTNode[]{varId, null});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_variable_declaration", 78,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 212: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_operation
                {
                    List RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String var =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    Variable varId = new Variable(varleft, varright, parser.ast, var);
                    list.add(new ASTNode[]{varId, expr});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_variable_declaration", 78,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 213: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_operation
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int constNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int constNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String constName =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
                    list.add(new ASTNode[]{constId, expr});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("constant_declaration", 79,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 214: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_operation
                {
                    List RESULT = null;
                    int constNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int constNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String constName =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
                    list.add(new ASTNode[]{constId, expr});
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("constant_declaration", 79,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 215: // echo_expr_list ::= echo_expr_list T_COMMA expr
                {
                    List RESULT = null;
                    int exprListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List exprList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    exprList.add(expr);
                    RESULT = exprList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("echo_expr_list", 40,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 216: // echo_expr_list ::= expr
                {
                    List RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List exprList = new LinkedList();
                    exprList.add(expr);
                    RESULT = exprList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("echo_expr_list", 40,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 217: // for_expr ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("for_expr", 41,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 218: // for_expr ::= non_empty_for_expr
                {
                    List RESULT = null;
                    int exprListleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprListright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List exprList = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = exprList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("for_expr", 41,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 219: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr
                {
                    List RESULT = null;
                    int exprListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List exprList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    exprList.add(expr);
                    RESULT = exprList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_for_expr", 42,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 220: // non_empty_for_expr ::= expr
                {
                    List RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List exprList = new LinkedList();
                    exprList.add(expr);
                    RESULT = exprList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_for_expr", 42,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 221: // chain_instance_call ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int openleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int openright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object open =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    ClassInstanceCreation expr =
                            (ClassInstanceCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ParenthesisExpression(openleft, endright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("chain_instance_call", 123,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 222: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("chain_instance_call", 123,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 223: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ObjectDimList var = (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("chain_instance_call", 123,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 224: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int memberPropertyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int memberPropertyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Variable memberProperty =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int endleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int endright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object end =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    DimList list = (DimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch,
                                    new FunctionInvocation(memberPropertyleft, endright, parser.ast,
                                            new FunctionName(memberPropertyleft, memberPropertyright, parser.ast,
                                                    memberProperty), paramsList)), list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("chain_instance_call", 123,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 225: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int memberPropertyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int memberPropertyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    ObjectDimList memberProperty =
                            (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int endleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int endright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object end =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    DimList list = (DimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (memberProperty.list != null) {
                        RESULT =
                                new FunctionInvocation(chleft, endright, parser.ast,
                                        new FunctionName(chleft, memberPropertyright, parser.ast,
                                                parser.createDispatch(ch,
                                                        memberProperty)), paramsList);
                    } else {
                        RESULT =
                                new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(
                                        memberPropertyleft, endright, parser.ast,
                                        new FunctionName(memberPropertyleft, memberPropertyright, parser.ast,
                                                memberProperty.variable), paramsList));
                    }
                    RESULT = parser.resolveDimList(RESULT, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("chain_instance_call", 123,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 226: // new_expr ::= T_NEW class_name_reference ctor_arguments
                {
                    ClassInstanceCreation RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    ClassName className =
                            (ClassName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int ctorleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ctorright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List ctor = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("new_expr", 124,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 227: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int varListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List varList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int closeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int closeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object close =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
                    RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 228: // expr_without_variable ::= variable T_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 229: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int reftokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int reftokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object reftoken =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int refvarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int refvarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase refvar =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(
                                    reftokenleft, refvarright, parser.ast, refvar));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 230: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int reftokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int reftokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object reftoken =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    ClassName className =
                            (ClassName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int ctorleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ctorright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List ctor = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL,
                            new Reference(reftokenleft, ctorright, parser.ast,
                                    new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 231: // expr_without_variable ::= T_CLONE expr
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 232: // expr_without_variable ::= variable T_PLUS_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_PLUS_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 233: // expr_without_variable ::= variable T_MINUS_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MINUS_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 234: // expr_without_variable ::= variable T_MUL_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MUL_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 235: // expr_without_variable ::= variable T_POW_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_POW_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 236: // expr_without_variable ::= variable T_DIV_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_DIV_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 237: // expr_without_variable ::= variable T_CONCAT_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_CONCAT_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 238: // expr_without_variable ::= variable T_MOD_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_MOD_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 239: // expr_without_variable ::= variable T_AND_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_AND_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 240: // expr_without_variable ::= variable T_OR_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_OR_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 241: // expr_without_variable ::= variable T_XOR_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_XOR_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 242: // expr_without_variable ::= variable T_SL_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SL_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 243: // expr_without_variable ::= variable T_SR_EQUAL expr
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_SR_EQUAL, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 244: // expr_without_variable ::= rw_variable T_INC
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int tokenleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int tokenright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object token = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_INC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 245: // expr_without_variable ::= T_INC rw_variable
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_INC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 246: // expr_without_variable ::= rw_variable T_DEC
                {
                    Expression RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int tokenleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int tokenright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object token = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var, PostfixExpression.OP_DEC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 247: // expr_without_variable ::= T_DEC rw_variable
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var, PrefixExpression.OP_DEC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 248: // expr_without_variable ::= expr T_BOOLEAN_OR expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 249: // expr_without_variable ::= expr T_BOOLEAN_AND expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 250: // expr_without_variable ::= expr T_LOGICAL_OR expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 251: // expr_without_variable ::= expr T_LOGICAL_AND expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 252: // expr_without_variable ::= expr T_LOGICAL_XOR expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 253: // expr_without_variable ::= expr T_OR expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 254: // expr_without_variable ::= expr T_REFERENCE expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 255: // expr_without_variable ::= expr T_KOVA expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 256: // expr_without_variable ::= expr T_NEKUDA expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 257: // expr_without_variable ::= expr T_PLUS expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 258: // expr_without_variable ::= expr T_MINUS expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 259: // expr_without_variable ::= expr T_TIMES expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 260: // expr_without_variable ::= expr T_POW expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_POW,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 261: // expr_without_variable ::= expr T_DIV expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 262: // expr_without_variable ::= expr T_PRECENT expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 263: // expr_without_variable ::= expr T_SL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 264: // expr_without_variable ::= expr T_SR expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 265: // expr_without_variable ::= T_PLUS expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 266: // expr_without_variable ::= T_MINUS expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 267: // expr_without_variable ::= T_NOT expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 268: // expr_without_variable ::= T_TILDA expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 269: // expr_without_variable ::= expr T_IS_IDENTICAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_IDENTICAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 270: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 271: // expr_without_variable ::= expr T_IS_EQUAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 272: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_NOT_EQUAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 273: // expr_without_variable ::= expr T_RGREATER expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 274: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 275: // expr_without_variable ::= expr T_LGREATER expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 276: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 277: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference
                {
                    Expression RESULT = null;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ClassName className = (ClassName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr, className);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 278: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 279: // expr_without_variable ::= new_expr
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ClassInstanceCreation expr =
                            (ClassInstanceCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 280: // expr_without_variable ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    YieldExpression expr =
                            (YieldExpression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ParenthesisExpression(startleft, endright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 281: // expr_without_variable ::= chain_instance_call
                {
                    Expression RESULT = null;
                    int chainleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int chainright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase chain = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = chain;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 282: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr
                {
                    Expression RESULT = null;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int ifTrueleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int ifTrueright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression ifTrue =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int ifFalseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ifFalseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, ifTrue, ifFalse);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 283: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr
                {
                    Expression RESULT = null;
                    int condleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int condright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression cond =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int ifFalseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ifFalseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond, null, ifFalse);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 284: // expr_without_variable ::= internal_functions_in_yacc
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 285: // expr_without_variable ::= T_INT_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_INT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 286: // expr_without_variable ::= T_DOUBLE_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_REAL);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 287: // expr_without_variable ::= T_STRING_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_STRING);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 288: // expr_without_variable ::= T_ARRAY_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 289: // expr_without_variable ::= T_OBJECT_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_OBJECT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 290: // expr_without_variable ::= T_BOOL_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_BOOL);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 291: // expr_without_variable ::= T_UNSET_CAST expr
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr, CastExpression.TYPE_UNSET);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 292: // expr_without_variable ::= T_EXIT exit_expr
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List expList = new LinkedList();
                    if (expr != null) {
                        expList.add(expr);
                    }
                    RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
                            new FunctionName(sleft, sright, parser.ast,
                                    new Identifier(sleft, sright, parser.ast, s)), expList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 293: // expr_without_variable ::= T_AT expr
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 294: // expr_without_variable ::= scalar
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = scalar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 295: // expr_without_variable ::= array_creation
                {
                    Expression RESULT = null;
                    int creationleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int creationright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ArrayCreation creation =
                            (ArrayCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = creation;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 296: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 297: // expr_without_variable ::= T_PRINT expr
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List expList = new LinkedList();
                    if (expr != null) {
                        expList.add(expr);
                    }
                    RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
                            new FunctionName(sleft, sright, parser.ast,
                                    new Identifier(sleft, sright, parser.ast, "print")), expList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 298: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 8)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).value;
                    int isReferenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int isReferenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Boolean isReference =
                            (Boolean) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int paramListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int paramListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    List paramList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int varsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List varsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int blockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int blockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object blockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int blockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int blockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object blockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
                            new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 8)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 299: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE
                {
                    Expression RESULT = null;
                    int stleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 9)).left;
                    int stright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 9)).right;
                    Object st =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 9)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 8)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 8)).value;
                    int isReferenceleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 7)).left;
                    int isReferenceright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).right;
                    Boolean isReference =
                            (Boolean) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 7)).value;
                    int paramListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int paramListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    List paramList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int varsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List varsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int blockStartleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int blockStartright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object blockStart =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int blockEndleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int blockEndright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object blockEnd = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList,
                                    new Block(blockStartleft, blockEndright, parser.ast, list),
                                    isReference.booleanValue(),
                                    true, stleft);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr_without_variable", 43,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 9)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$PhpAstParser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method 1 with the actual generated action code for actions 300 to 600.
         */
        public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action_part00000001(
                int CUP$PhpAstParser$act_num,
                java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
                java.util.Stack CUP$PhpAstParser$stack,
                int CUP$PhpAstParser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$PhpAstParser$result;

            /* select the action based on the action number */
            switch (CUP$PhpAstParser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 300: // array_creation ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE
                {
                    ArrayCreation RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayCreation(startleft, endright, parser.ast, list, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_creation", 132,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 301: // array_creation ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT
                {
                    ArrayCreation RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_creation", 132,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 302: // array_creation_dereference ::= array_creation T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int creationleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int creationright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    ArrayCreation creation =
                            (ArrayCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression ex =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(creationleft, endright, parser.ast, creation, ex,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_creation_dereference", 133,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 303: // array_creation_dereference ::= array_creation_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int creationleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int creationright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable creation =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression ex =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(creationleft, endright, parser.ast, creation, ex,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_creation_dereference", 133,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 304: // lexical_vars ::=
                {
                    List RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_vars", 28,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 305: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE
                {
                    List RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_vars", 28,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 306: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    Variable v = new Variable(varleft, varright, parser.ast, var);
                    list.add(v);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_var_list", 29,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 307: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ref =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new Reference(refleft, varright, parser.ast,
                            new Variable(varleft, varright, parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_var_list", 29,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 308: // lexical_var_list ::= T_VARIABLE
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new Variable(varleft, varright, parser.ast, var));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_var_list", 29,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 309: // lexical_var_list ::= T_REFERENCE T_VARIABLE
                {
                    List RESULT = null;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object ref =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String var = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new Reference(refleft, varright, parser.ast,
                            new Variable(varleft, varright, parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("lexical_var_list", 29,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 310: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FunctionInvocation(listleft, eright, parser.ast,
                            new FunctionName(listleft, listright, parser.ast,
                                    new NamespaceName(listleft, listright, parser.ast, list, false, false)),
                            parameters);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 311: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FunctionInvocation(sleft, eright, parser.ast,
                            new FunctionName(sleft, listright, parser.ast,
                                    new NamespaceName(sleft, listright, parser.ast, list, false, true)), parameters);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 312: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FunctionInvocation(sleft, eright, parser.ast,
                            new FunctionName(sleft, listright, parser.ast,
                                    new NamespaceName(sleft, listright, parser.ast, list, true, false)), parameters);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 313: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int fnleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int fnright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    VariableBase fn =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
                            new FunctionInvocation(fnleft, eright, parser.ast,
                                    new FunctionName(fnleft, fnright, parser.ast,
                                            fn), parameters));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 314: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int reflectionNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int reflectionNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable reflectionName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
                                    new FunctionInvocation(reflectionNameleft, eright, parser.ast,
                                            new FunctionName(reflectionNameleft, reflectionNameright, parser.ast,
                                                    reflectionName), parameters));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 315: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Variable className =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int fnleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int fnright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    VariableBase fn =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
                            new FunctionInvocation(fnleft, eright, parser.ast,
                                    new FunctionName(fnleft, fnright, parser.ast,
                                            fn), parameters));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 316: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Variable className =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int reflectionNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int reflectionNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable reflectionName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new StaticMethodInvocation(classNameleft, eright, parser.ast, className,
                                    new FunctionInvocation(reflectionNameleft, eright, parser.ast,
                                            new FunctionName(reflectionNameleft, reflectionNameright, parser.ast,
                                                    reflectionName), parameters));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 317: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    VariableBase RESULT = null;
                    int reflectionNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int reflectionNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable reflectionName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int parametersleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int parametersright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List parameters =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new FunctionInvocation(reflectionNameleft, eright, parser.ast,
                                    new FunctionName(reflectionNameleft, reflectionNameright, parser.ast,
                                            reflectionName),
                                    parameters);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 318: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    VariableBase RESULT = null;
                    int callleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int callright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    VariableBase call =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(callleft, eright, parser.ast, call, expr, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("function_call", 44,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 319: // class_name ::= T_STATIC
                {
                    Expression RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object s = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Identifier(sleft, sright, parser.ast, "static");

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name", 76,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 320: // class_name ::= namespace_name
                {
                    Expression RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name", 76,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 321: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name", 76,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 322: // class_name ::= T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name", 76,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 323: // fully_qualified_class_name ::= namespace_name
                {
                    NamespaceName RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("fully_qualified_class_name", 77,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 324: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
                {
                    NamespaceName RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("fully_qualified_class_name", 77,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 325: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name
                {
                    NamespaceName RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("fully_qualified_class_name", 77,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 326: // class_name_reference ::= class_name
                {
                    ClassName RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression className = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name_reference", 104,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 327: // class_name_reference ::= dynamic_class_name_reference
                {
                    ClassName RESULT = null;
                    int classNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ClassName className = (ClassName) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = className;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_name_reference", 104,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 328: // dynamic_class_name_reference ::= dynamic_class_name_variable_property
                {
                    ClassName RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ClassName(varleft, varright, parser.ast, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dynamic_class_name_reference", 106,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 329: // dynamic_class_name_variable_property ::= base_variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property", 108,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 330: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property", 108,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 331: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ObjectDimList var = (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property", 108,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 332: // exit_expr ::=
                {
                    Expression RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("exit_expr", 45,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 333: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("exit_expr", 45,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 334: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("exit_expr", 45,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 335: // backticks_expr ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("backticks_expr", 68,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 336: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE
                {
                    List RESULT = null;
                    int stringleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int stringright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String string = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    Scalar scalar =
                            new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN
                                    : Scalar.TYPE_STRING);
                    list.add(scalar);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("backticks_expr", 68,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 337: // backticks_expr ::= encaps_list
                {
                    List RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("backticks_expr", 68,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 338: // ctor_arguments ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("ctor_arguments", 46,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 339: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE
                {
                    List RESULT = null;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = paramsList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("ctor_arguments", 46,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 340: // string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT expr T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int scalarleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int scalarright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    String scalar =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(scalarleft, endright, parser.ast, new Scalar(scalarleft, scalarright,
                                    parser.ast, scalar, Scalar.TYPE_STRING), index, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("string_dereference", 136,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 341: // string_dereference ::= string_dereference T_OPEN_RECT expr T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int scalarleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int scalarright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable scalar =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(scalarleft, endright, parser.ast, scalar, index,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("string_dereference", 136,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 342: // common_scalar ::= T_LNUMBER
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 343: // common_scalar ::= T_DNUMBER
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 344: // common_scalar ::= T_BNUMBER
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_BIN);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 345: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 346: // common_scalar ::= T_LINE
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 347: // common_scalar ::= T_FILE
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 348: // common_scalar ::= T_DIR
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 349: // common_scalar ::= T_CLASS_C
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 350: // common_scalar ::= T_TRAIT_C
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__TRAIT__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 351: // common_scalar ::= T_METHOD_C
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 352: // common_scalar ::= T_FUNC_C
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 353: // common_scalar ::= T_NS_C
                {
                    VariableBase RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object scalar = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 354: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC
                {
                    VariableBase RESULT = null;
                    int labelleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int labelright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String label =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int stringleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int stringright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String string =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(
                            new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN
                                    : Scalar.TYPE_STRING));
                    RESULT =
                            new Quote(labelleft, eright, parser.ast, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC
                                    : Quote.QT_HEREDOC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 355: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC
                {
                    VariableBase RESULT = null;
                    int labelleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int labelright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String label =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new Quote(labelleft, eright, parser.ast, new LinkedList(),
                                    label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("common_scalar", 47,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 356: // static_operation ::= static_scalar
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression scalar = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = scalar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 357: // static_operation ::= static_operation T_OPEN_RECT static_scalar T_CLOSE_RECT
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(expr1left, endright, parser.ast, (VariableBase) expr1, index,
                                    ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 358: // static_operation ::= static_operation T_IS_IDENTICAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_IDENTICAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 359: // static_operation ::= static_operation T_IS_NOT_IDENTICAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 360: // static_operation ::= static_operation T_IS_EQUAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_IS_EQUAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 361: // static_operation ::= static_operation T_IS_NOT_EQUAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_NOT_EQUAL,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 362: // static_operation ::= static_operation T_RGREATER static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_RGREATER,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 363: // static_operation ::= static_operation T_IS_SMALLER_OR_EQUAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 364: // static_operation ::= static_operation T_LGREATER static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_LGREATER,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 365: // static_operation ::= static_operation T_IS_GREATER_OR_EQUAL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1,
                                    InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 366: // static_operation ::= static_operation T_BOOLEAN_OR static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_OR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 367: // static_operation ::= static_operation T_BOOLEAN_AND static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_BOOL_AND,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 368: // static_operation ::= static_operation T_LOGICAL_OR static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_OR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 369: // static_operation ::= static_operation T_LOGICAL_AND static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_AND,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 370: // static_operation ::= static_operation T_LOGICAL_XOR static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_STRING_XOR,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 371: // static_operation ::= static_operation T_OR static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_OR, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 372: // static_operation ::= static_operation T_REFERENCE static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_AND,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 373: // static_operation ::= static_operation T_KOVA static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_XOR,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 374: // static_operation ::= static_operation T_NEKUDA static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_CONCAT,
                                    expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 375: // static_operation ::= static_operation T_PLUS static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_PLUS,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 376: // static_operation ::= static_operation T_MINUS static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MINUS,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 377: // static_operation ::= static_operation T_TIMES static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MUL,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 378: // static_operation ::= static_operation T_DIV static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_DIV,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 379: // static_operation ::= static_operation T_PRECENT static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_MOD,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 380: // static_operation ::= static_operation T_SL static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SL, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 381: // static_operation ::= static_operation T_SR static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_SR, expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 382: // static_operation ::= static_operation T_POW static_operation
                {
                    Expression RESULT = null;
                    int expr1left =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int expr1right =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression expr1 =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int expr2left = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int expr2right = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr2 = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1, InfixExpression.OP_POW,
                            expr2);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 383: // static_operation ::= T_PLUS static_operation
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 384: // static_operation ::= T_MINUS static_operation
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 385: // static_operation ::= T_TILDA static_operation
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_TILDA);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 386: // static_operation ::= T_NOT static_operation
                {
                    Expression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr, UnaryOperation.OP_NOT);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 387: // static_operation ::= static_operation T_QUESTION_MARK static_operation T_NEKUDOTAIM static_operation
                {
                    Expression RESULT = null;
                    int conditionleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int conditionright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Expression condition =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int ifTrueleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int ifTrueright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression ifTrue =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int ifFalseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ifFalseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConditionalExpression(conditionleft, ifFalseright, parser.ast, condition, ifTrue,
                            ifFalse);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 388: // static_operation ::= static_operation T_QUESTION_MARK T_NEKUDOTAIM static_operation
                {
                    Expression RESULT = null;
                    int conditionleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int conditionright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression condition =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int ifFalseleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ifFalseright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression ifFalse = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ConditionalExpression(conditionleft, ifFalseright, parser.ast, condition, null,
                            ifFalse);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 389: // static_operation ::= T_OPEN_PARENTHESE static_operation T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ParenthesisExpression(startleft, endright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_operation", 48,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 390: // static_array_creation ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE
                {
                    ArrayCreation RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_creation", 134,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 391: // static_array_creation ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT
                {
                    ArrayCreation RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayCreation(sleft, eright, parser.ast, list, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_creation", 134,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 392: // static_array_creation_dereference ::= static_array_creation T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    ArrayCreation ref =
                            (ArrayCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int expleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int expright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression exp =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(refleft, eright, parser.ast, ref, exp, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_creation_dereference", 135,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 393: // static_array_creation_dereference ::= static_array_creation_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable ref =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int expleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int expright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression exp =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(refleft, eright, parser.ast, ref, exp, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_creation_dereference", 135,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 394: // static_string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT static_scalar T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int scalarleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int scalarright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    String scalar =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(scalarleft, endright, parser.ast, new Scalar(scalarleft, scalarright,
                                    parser.ast, scalar, Scalar.TYPE_STRING), index, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_string_dereference", 137,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 395: // static_string_dereference ::= static_string_dereference T_OPEN_RECT static_scalar T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int scalarleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int scalarright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable scalar =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(scalarleft, endright, parser.ast, scalar, index,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_string_dereference", 137,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 396: // constant_dereference ::= class_name T_OPEN_RECT expr T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int constantleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int constantright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression constant =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(constantleft, endright, parser.ast, detectScalar((VariableBase) constant),
                                    index, ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("constant_dereference", 138,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 397: // constant_dereference ::= static_class_constant T_OPEN_RECT expr T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int constantleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int constantright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    StaticConstantAccess constant =
                            (StaticConstantAccess) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(constantleft, endright, parser.ast, constant, index,
                                    ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("constant_dereference", 138,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 398: // constant_dereference ::= constant_dereference T_OPEN_RECT expr T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int constantleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int constantright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable constant =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int endleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int endright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object end = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(constantleft, endright, parser.ast, constant, index,
                                    ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("constant_dereference", 138,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 399: // static_scalar ::= common_scalar
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase scalar =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = scalar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 400: // static_scalar ::= namespace_name
                {
                    Expression RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (list.size() == 1) {
                        RESULT =
                                new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(),
                                        Scalar.TYPE_STRING);
                    } else {
                        RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
                    }

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 401: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 402: // static_scalar ::= T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 403: // static_scalar ::= static_array_creation
                {
                    Expression RESULT = null;
                    int arrleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int arrright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ArrayCreation arr = (ArrayCreation) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = arr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 404: // static_scalar ::= static_array_creation_dereference
                {
                    Expression RESULT = null;
                    int arrleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int arrright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable arr = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = arr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 405: // static_scalar ::= static_string_dereference
                {
                    Expression RESULT = null;
                    int refleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int refright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable ref = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = ref;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 406: // static_scalar ::= static_class_constant
                {
                    Expression RESULT = null;
                    int classConstantleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classConstantright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    StaticConstantAccess classConstant =
                            (StaticConstantAccess) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = classConstant;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_scalar", 49,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 407: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING
                {
                    StaticConstantAccess RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String varName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
                            new Identifier(varNameleft, varNameright, parser.ast, varName));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_class_constant", 109,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 408: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS
                {
                    StaticConstantAccess RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object varName = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
                            new Identifier(varNameleft, varNameright, parser.ast, "class"));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_class_constant", 109,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 409: // scalar ::= T_STRING_VARNAME
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String scalar = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 410: // scalar ::= class_constant
                {
                    Expression RESULT = null;
                    int classConstantleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int classConstantright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    StaticConstantAccess classConstant =
                            (StaticConstantAccess) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = classConstant;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 411: // scalar ::= namespace_name
                {
                    Expression RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (list.size() == 1) {
                        RESULT =
                                new Scalar(listleft, listright, parser.ast, ((Identifier) list.get(0)).getName(),
                                        Scalar.TYPE_STRING);
                    } else {
                        RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
                    }

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 412: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 413: // scalar ::= T_NS_SEPARATOR namespace_name
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    List list = (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 414: // scalar ::= common_scalar
                {
                    Expression RESULT = null;
                    int scalarleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int scalarright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase scalar =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = scalar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 415: // scalar ::= T_QUATE encaps_list T_QUATE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 416: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_SINGLE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 417: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_HEREDOC);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 418: // scalar ::= string_dereference
                {
                    Expression RESULT = null;
                    int refleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int refright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable ref = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = ref;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 419: // scalar ::= constant_dereference
                {
                    Expression RESULT = null;
                    int refleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int refright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable ref = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = ref;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("scalar", 50,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 420: // static_array_pair_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_pair_list", 51,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 421: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_array_pair_list", 51,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 422: // possible_comma ::=
                {
                    Object RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("possible_comma", 52,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 423: // possible_comma ::= T_COMMA
                {
                    Object RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("possible_comma", 52,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 424: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_operation T_DOUBLE_ARROW static_operation
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(keyleft, exprright, parser.ast, key, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list", 53,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 425: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_operation
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list", 53,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 426: // non_empty_static_array_pair_list ::= static_operation T_DOUBLE_ARROW static_operation
                {
                    List RESULT = null;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(keyleft, exprright, parser.ast, key, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list", 53,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 427: // non_empty_static_array_pair_list ::= static_operation
                {
                    List RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list", 53,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 428: // expr ::= r_variable
                {
                    Expression RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr", 54,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 429: // expr ::= expr_without_variable
                {
                    Expression RESULT = null;
                    int ewvleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int ewvright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression ewv = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = ewv;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("expr", 54,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 430: // r_variable ::= variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("r_variable", 97,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 431: // w_variable ::= variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("w_variable", 75,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 432: // rw_variable ::= variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("rw_variable", 99,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 433: // variable ::= base_variable_with_function_calls
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable", 86,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 434: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable", 86,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 435: // variable ::= variable T_OBJECT_OPERATOR object_dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ObjectDimList var = (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(ch, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable", 86,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 436: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int memberPropertyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int memberPropertyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    Variable memberProperty =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int endleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int endright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object end =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    DimList list = (DimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            parser.resolveDimList(new MethodInvocation(chleft, endright, parser.ast, ch,
                                    new FunctionInvocation(memberPropertyleft, endright, parser.ast,
                                            new FunctionName(memberPropertyleft, memberPropertyright, parser.ast,
                                                    memberProperty), paramsList)), list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable", 86,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 437: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list
                {
                    VariableBase RESULT = null;
                    int chleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 6)).left;
                    int chright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).right;
                    VariableBase ch =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 6)).value;
                    int memberPropertyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int memberPropertyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    ObjectDimList memberProperty =
                            (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int startleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int startright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object start =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int paramsListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int paramsListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List paramsList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int endleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int endright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object end =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    DimList list = (DimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (memberProperty.list != null) {
                        RESULT =
                                new FunctionInvocation(chleft, endright, parser.ast,
                                        new FunctionName(chleft, memberPropertyright, parser.ast,
                                                parser.createDispatch(ch,
                                                        memberProperty)), paramsList);
                    } else {
                        RESULT =
                                new MethodInvocation(chleft, endright, parser.ast, ch, new FunctionInvocation(
                                        memberPropertyleft, endright, parser.ast,
                                        new FunctionName(memberPropertyleft, memberPropertyright, parser.ast,
                                                memberProperty.variable), paramsList));
                    }
                    RESULT = parser.resolveDimList(RESULT, list);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable", 86,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 6)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 438: // variable_without_objects ::= reference_variable
                {
                    Variable RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_without_objects", 100,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 439: // variable_without_objects ::= simple_indirect_reference reference_variable
                {
                    Variable RESULT = null;
                    int ref_countleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ref_countright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Integer ref_count =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    // the ref_count counts the number of reflection (DOLLAR sign) so now we should
                    // accomulate the dolars into reflection variables
                    Variable finalVar = var;
                    for (int i = 0; i < ref_count.intValue(); i++) {
                        finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
                    }
                    RESULT = finalVar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_without_objects", 100,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 440: // variable_without_objects ::= array_creation_dereference
                {
                    Variable RESULT = null;
                    int creationleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int creationright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable creation = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = creation;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_without_objects", 100,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 441: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_member", 101,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 442: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects
                {
                    VariableBase RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Variable className =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("static_member", 101,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 443: // variable_class_name ::= reference_variable
                {
                    Variable RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_class_name", 56,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 444: // base_variable_with_function_calls ::= base_variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable_with_function_calls", 110,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 445: // base_variable_with_function_calls ::= function_call
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable_with_function_calls", 110,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 446: // base_variable_with_function_calls ::= array_creation_dereference
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable_with_function_calls", 110,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 447: // base_variable ::= reference_variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable", 107,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 448: // base_variable ::= simple_indirect_reference reference_variable
                {
                    VariableBase RESULT = null;
                    int ref_countleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int ref_countright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Integer ref_count =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    // the ref_count counts the number of reflection (DOLLAR sign) so now we should
                    // accomulate the dolars into reflection variables
                    VariableBase finalVar = var;
                    for (int i = 0; i < ref_count.intValue(); i++) {
                        finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);
                    }
                    RESULT = finalVar;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable", 107,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 449: // base_variable ::= static_member
                {
                    VariableBase RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase s = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = s;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("base_variable", 107,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 450: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    Variable RESULT = null;
                    int varNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable varName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("reference_variable", 55,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 451: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE
                {
                    Variable RESULT = null;
                    int varNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable varName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(varNameleft, eright, parser.ast, varName, index,
                                    ArrayAccess.VARIABLE_HASHTABLE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("reference_variable", 55,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 452: // reference_variable ::= compound_variable
                {
                    Variable RESULT = null;
                    int comp_varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int comp_varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable comp_var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = comp_var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("reference_variable", 55,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 453: // compound_variable ::= tracked_variable
                {
                    Variable RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = var;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("compound_variable", 57,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 454: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE
                {
                    Variable RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("compound_variable", 57,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 455: // dim_offset ::=
                {
                    Expression RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dim_offset", 58,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 456: // dim_offset ::= expr
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dim_offset", 58,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 457: // dim_list ::=
                {
                    DimList RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dim_list", 60,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 458: // dim_list ::= dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    DimList RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    DimList list =
                            (DimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (list == null) {
                        list = new DimList();
                    }
                    list.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("dim_list", 60,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 459: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT
                {
                    ObjectDimList RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    ObjectDimList var =
                            (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    var.add(index, ArrayAccess.VARIABLE_ARRAY, eright);
                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("object_dim_list", 59,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 460: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE
                {
                    ObjectDimList RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    ObjectDimList var =
                            (ObjectDimList) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    var.add(index, ArrayAccess.VARIABLE_HASHTABLE, eright);
                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("object_dim_list", 59,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 461: // object_dim_list ::= variable_name
                {
                    ObjectDimList RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ObjectDimList(var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("object_dim_list", 59,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 462: // variable_name ::= string_st
                {
                    VariableBase RESULT = null;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String varName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_name", 61,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 463: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("variable_name", 61,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 464: // simple_indirect_reference ::= T_DOLLAR
                {
                    Integer RESULT = null;

                    RESULT = Integer.valueOf(1);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("simple_indirect_reference", 62,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 465: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR
                {
                    Integer RESULT = null;
                    int refleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int refright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Integer ref =
                            (Integer) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = Integer.valueOf(1 + ref.intValue());

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("simple_indirect_reference", 62,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 466: // assignment_list ::= assignment_list T_COMMA assignment_list_element
                {
                    List RESULT = null;
                    int listElementsleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listElementsright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List listElements =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int elementleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int elementright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase element =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    if (element != null) {
                        listElements.add(element);
                    } else {
                        listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
                    }
                    RESULT = listElements;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("assignment_list", 63,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 467: // assignment_list ::= assignment_list_element
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List listElements = new LinkedList();
                    if (var != null) {
                        listElements.add(var);
                    } else {
                        listElements.add(new Variable(varleft, varright, parser.ast, ""));
                    }
                    RESULT = listElements;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("assignment_list", 63,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 468: // assignment_list_element ::= variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("assignment_list_element", 64,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 469: // assignment_list_element ::= list_variable
                {
                    VariableBase RESULT = null;
                    int listleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int listright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    ListVariable list = (ListVariable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("assignment_list_element", 64,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 470: // assignment_list_element ::=
                {
                    VariableBase RESULT = null;

                    RESULT = null;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("assignment_list_element", 64,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 471: // array_pair_list ::=
                {
                    List RESULT = null;

                    RESULT = new LinkedList();

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_pair_list", 65,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 472: // array_pair_list ::= non_empty_array_pair_list possible_comma
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;

                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("array_pair_list", 65,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 473: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 4)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 474: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 475: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr
                {
                    List RESULT = null;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression value = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 476: // non_empty_array_pair_list ::= expr
                {
                    List RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 477: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright,
                            parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 478: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new ArrayElement(sleft, varright, parser.ast,
                            new Reference(sleft, varright, parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 479: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright,
                            parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 480: // non_empty_array_pair_list ::= T_REFERENCE w_variable
                {
                    List RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(new ArrayElement(sleft, varright, parser.ast,
                            new Reference(sleft, varright, parser.ast, var)));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("non_empty_array_pair_list", 66,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 481: // encaps_list ::= encaps_list encaps_var
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_list", 67,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 482: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int stringleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int stringright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String string = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(
                            new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN
                                    : Scalar.TYPE_STRING));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_list", 67,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 483: // encaps_list ::= encaps_list T_CHARACTER
                {
                    List RESULT = null;
                    int listleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int listright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List list =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int stringleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int stringright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String string = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    list.add(new Scalar(stringleft, stringright, parser.ast, string, Scalar.TYPE_STRING));
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_list", 67,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 484: // encaps_list ::= encaps_var
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_list", 67,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 485: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var
                {
                    List RESULT = null;
                    int stringleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int stringright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String string =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(
                            new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN
                                    : Scalar.TYPE_STRING));
                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_list", 67,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 486: // encaps_var ::= tracked_variable
                {
                    VariableBase RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 487: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT
                {
                    VariableBase RESULT = null;
                    int varNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int varNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Variable varName =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index,
                            ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 488: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st
                {
                    VariableBase RESULT = null;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Variable var =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int stringleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int stringright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String string = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 489: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 490: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 5)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 5)).value;
                    int varNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 4)).left;
                    int varNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).right;
                    String varName =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 4)).value;
                    int indexleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int indexright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression index =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT =
                            new ArrayAccess(sleft, eright, parser.ast,
                                    new Variable(varNameleft, varNameright, parser.ast, varName), index,
                                    ArrayAccess.VARIABLE_ARRAY);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 5)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 491: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE
                {
                    VariableBase RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Object s =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    VariableBase var =
                            (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var", 69,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 492: // encaps_var_offset ::= string_st
                {
                    Expression RESULT = null;
                    int stringleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int stringright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String string = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Identifier(stringleft, stringright, parser.ast, string);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var_offset", 70,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 493: // encaps_var_offset ::= T_NUM_STRING
                {
                    Expression RESULT = null;
                    int numleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int numright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String num = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Scalar(numleft, numright, parser.ast, num, Scalar.TYPE_REAL);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var_offset", 70,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 494: // encaps_var_offset ::= tracked_variable
                {
                    Expression RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Variable var = (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = var;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("encaps_var_offset", 70,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 495: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int varListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int varListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    List varList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new FunctionInvocation(sleft, eright, parser.ast,
                            new FunctionName(sleft, sright, parser.ast,
                                    new Identifier(sleft, sright, parser.ast, "isset")), varList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 496: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    LinkedList exprList = new LinkedList();
                    exprList.add(expr);
                    RESULT =
                            new FunctionInvocation(sleft, eright, parser.ast,
                                    new FunctionName(sleft, sright, parser.ast,
                                            new Identifier(sleft, sright, parser.ast,
                                                    "empty")), exprList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 497: // internal_functions_in_yacc ::= T_INCLUDE expr
                {
                    Expression RESULT = null;
                    int includeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int includeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String include =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 498: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr
                {
                    Expression RESULT = null;
                    int includeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int includeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String include =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 499: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE
                {
                    Expression RESULT = null;
                    int sleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int sright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    String s =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int exprleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int exprright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Expression expr =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int eleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int eright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object e = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    LinkedList exprList = new LinkedList();
                    exprList.add(expr);
                    RESULT =
                            new FunctionInvocation(sleft, eright, parser.ast,
                                    new FunctionName(sleft, sright, parser.ast,
                                            new Identifier(sleft, sright, parser.ast,
                                                    "eval")), exprList);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 500: // internal_functions_in_yacc ::= T_REQUIRE expr
                {
                    Expression RESULT = null;
                    int includeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int includeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String include =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 501: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr
                {
                    Expression RESULT = null;
                    int includeleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int includeright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    String include =
                            (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("internal_functions_in_yacc", 71,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 502: // isset_variables ::= variable
                {
                    List RESULT = null;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    List list = new LinkedList();
                    list.add(var);
                    RESULT = list;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("isset_variables", 102,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 503: // isset_variables ::= isset_variables T_COMMA variable
                {
                    List RESULT = null;
                    int varListleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int varListright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    List varList =
                            (List) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase var = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    varList.add(var);
                    RESULT = varList;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("isset_variables", 102,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 504: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING
                {
                    StaticConstantAccess RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String varName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
                            new Identifier(varNameleft, varNameright, parser.ast, varName));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_constant", 105,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 505: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS
                {
                    StaticConstantAccess RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression className =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object varName = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
                            new Identifier(varNameleft, varNameright, parser.ast, "class"));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_constant", 105,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 506: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING
                {
                    StaticConstantAccess RESULT = null;
                    int classNameleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int classNameright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Variable className =
                            (Variable) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String varName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className,
                            new Identifier(varNameleft, varNameright, parser.ast, varName));

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("class_constant", 105,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 2)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 507: // tracked_variable ::= T_VARIABLE
                {
                    Variable RESULT = null;
                    int varNameleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int varNameright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String varName = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new Variable(varNameleft, varNameright, parser.ast, varName);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("tracked_variable", 103,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 508: // string_st ::= T_STRING
                {
                    String RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String value = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = value;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("string_st", 72,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 509: // string_st ::= T_DEFINE
                {
                    String RESULT = null;
                    int valueleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int valueright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    String value = (String) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;
                    RESULT = value;
                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("string_st", 72,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 510: // yield_arg ::= variable
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    VariableBase expr = (VariableBase) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("yield_arg", 130,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 511: // yield_arg ::= expr_without_variable
                {
                    Expression RESULT = null;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = expr;

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("yield_arg", 130,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 512: // yield_expr ::= T_YIELD
                {
                    YieldExpression RESULT = null;
                    int tokenleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int tokenright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Object token = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new YieldExpression(tokenleft, tokenright, parser.ast);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("yield_expr", 131,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 513: // yield_expr ::= T_YIELD yield_arg
                {
                    YieldExpression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 1)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 1)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new YieldExpression(tokenleft, exprright, parser.ast, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("yield_expr", 131,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 1)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 514: // yield_expr ::= T_YIELD yield_arg T_DOUBLE_ARROW yield_arg
                {
                    YieldExpression RESULT = null;
                    int tokenleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 3)).left;
                    int tokenright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).right;
                    Object token =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 3)).value;
                    int keyleft =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.elementAt(CUP$PhpAstParser$top - 2)).left;
                    int keyright =
                            ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).right;
                    Expression key =
                            (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                    .elementAt(CUP$PhpAstParser$top - 2)).value;
                    int exprleft = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).left;
                    int exprright = ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).right;
                    Expression expr = (Expression) ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()).value;

                    RESULT = new YieldExpression(tokenleft, exprright, parser.ast, key, expr);

                    CUP$PhpAstParser$result =
                            parser.getSymbolFactory().newSymbol("yield_expr", 131,
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack
                                            .elementAt(CUP$PhpAstParser$top - 3)),
                                    ((java_cup.runtime.Symbol) CUP$PhpAstParser$stack.peek()), RESULT);
                }
                return CUP$PhpAstParser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$PhpAstParser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final java_cup.runtime.Symbol CUP$PhpAstParser$do_action(
                int CUP$PhpAstParser$act_num,
                java_cup.runtime.lr_parser CUP$PhpAstParser$parser,
                java.util.Stack CUP$PhpAstParser$stack,
                int CUP$PhpAstParser$top)
                throws java.lang.Exception {
            /* select the action handler based on the action number */
            switch (CUP$PhpAstParser$act_num / 300) {
                /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
                case 0:
                    return CUP$PhpAstParser$do_action_part00000000(
                            CUP$PhpAstParser$act_num,
                            CUP$PhpAstParser$parser,
                            CUP$PhpAstParser$stack,
                            CUP$PhpAstParser$top);
                /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
                case 1:
                    return CUP$PhpAstParser$do_action_part00000001(
                            CUP$PhpAstParser$act_num,
                            CUP$PhpAstParser$parser,
                            CUP$PhpAstParser$stack,
                            CUP$PhpAstParser$top);
                /* . . . no valid action number: . . .*/
                default:
                    throw new Exception("Invalid action number found in internal parse table");

            } /* end of switch */
        }
    }

}
